"use client";

import React, { useState, useRef, useEffect, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  ChevronLeft,
  ChevronRight,
  FileText,
  Folder,
  FolderOpen,
  Download,
  Play,
  Clock,
  CheckCircle,
  Circle,
  Send,
  Paperclip,
  Mic,
  Image,
  Upload,
  X,
  Bot,
  User,
  Settings,
  Monitor,
  Code,
  Eye,
  Activity,
  Zap,
  Sparkles,
  Terminal,
  GitBranch,
  Package,
  Server,
  Database,
  Globe,
  Cpu,
  HardDrive,
  Network,
  Shield,
  Lock,
  Unlock,
  Power,
  Wifi,
  Bluetooth,
  Battery,
  Volume2,
  VolumeX,
  Sun,
  Moon,
  Star,
  Heart,
  ThumbsUp,
  MessageSquare,
  Bell,
  Search,
  Filter,
  Sort,
  Grid,
  List,
  Calendar,
  Clock3,
  Timer,
  Stopwatch,
  Alarm,
  Camera,
  Video,
  Music,
  Headphones,
  Speaker,
  Microphone,
  Phone,
  Mail,
  MapPin,
  Navigation,
  Compass,
  Map,
  Route,
  Car,
  Plane,
  Train,
  Ship,
  Bike,
  Walk,
  Home,
  Building,
  Store,
  Factory,
  School,
  Hospital,
  Bank,
  Restaurant,
  Hotel,
  Park,
  Beach,
  Mountain,
  Tree,
  Flower,
  Leaf,
  Sun as SunIcon,
  Cloud,
  CloudRain,
  CloudSnow,
  CloudLightning,
  Wind,
  Thermometer,
  Umbrella,
  Rainbow,
  Snowflake,
  Droplets,
  Waves,
  Fire,
  Flame,
  Zap as ZapIcon,
  Bolt,
  Flash,
  Lightning,
  Thunder,
  Storm,
  Tornado,
  Hurricane,
  Earthquake,
  Volcano,
  Meteor,
  Comet,
  Planet,
  Satellite,
  Rocket,
  Shuttle,
  Telescope,
  Microscope,
  Atom,
  Dna,
  Molecule,
  Cell,
  Virus,
  Bacteria,
  Pill,
  Syringe,
  Bandage,
  Stethoscope,
  Thermometer as ThermometerIcon,
  HeartPulse,
  Brain,
  Eye as EyeIcon,
  Ear,
  Nose,
  Mouth,
  Hand,
  Foot,
  Bone,
  Muscle,
  Blood,
  Lungs,
  Kidney,
  Liver,
  Stomach,
  Intestine,
  Tooth,
  Hair,
  Skin,
  Nail,
  Fingerprint,
  Dna as DnaIcon,
  Gene,
  Chromosome,
  Protein,
  Enzyme,
  Hormone,
  Neuron,
  Synapse,
  Axon,
  Dendrite,
  Soma,
  Nucleus,
  Mitochondria,
  Ribosome,
  Endoplasm,
  Golgi,
  Lysosome,
  Vacuole,
  Chloroplast,
  Membrane,
  Cytoplasm,
  Organelle,
  Tissue,
  Organ,
  System,
  Organism,
  Species,
  Genus,
  Family,
  Order,
  Class,
  Phylum,
  Kingdom,
  Domain,
  Life,
  Evolution,
  Selection,
  Mutation,
  Adaptation,
  Survival,
  Extinction,
  Fossil,
  Archaeology,
  History,
  Timeline,
  Era,
  Period,
  Epoch,
  Age,
  Century,
  Decade,
  Year,
  Month,
  Week,
  Day,
  Hour,
  Minute,
  Second,
  Millisecond,
  Nanosecond,
  Picosecond,
  Femtosecond,
  Attosecond,
  Zeptosecond,
  Yoctosecond,
  Infinity,
  Zero,
  One,
  Two,
  Three,
  Four,
  Five,
  Six,
  Seven,
  Eight,
  Nine,
  Ten,
  Hundred,
  Thousand,
  Million,
  Billion,
  Trillion,
  Quadrillion,
  Quintillion,
  Sextillion,
  Septillion,
  Octillion,
  Nonillion,
  Decillion,
  Plus,
  Minus,
  Multiply,
  Divide,
  Equals,
  Percent,
  Pi,
  Sigma,
  Delta,
  Alpha,
  Beta,
  Gamma,
  Theta,
  Lambda,
  Mu,
  Nu,
  Xi,
  Omicron,
  Rho,
  Tau,
  Upsilon,
  Phi,
  Chi,
  Psi,
  Omega
} from "lucide-react";
import { cn } from "@/lib/utils";

// Types
interface FileNode {
  id: string;
  name: string;
  type: "file" | "folder";
  children?: FileNode[];
  content?: string;
  size?: number;
  modified?: Date;
}

interface TimelineStep {
  id: string;
  title: string;
  description: string;
  status: "completed" | "in-progress" | "pending";
  timestamp: Date;
  duration?: number;
  type: "file_created" | "file_modified" | "command_run" | "package_installed" | "server_started" | "build_complete" | "deploy_success" | "error" | "warning" | "info";
}

interface ChatMessage {
  id: string;
  content: string;
  role: "user" | "assistant";
  timestamp: Date;
  attachments?: Array<{
    name: string;
    type: string;
    url: string;
  }>;
}

interface Theme {
  name: string;
  colors: {
    primary: string;
    secondary: string;
    accent: string;
    background: string;
    surface: string;
    text: string;
    border: string;
  };
  effects: {
    glow: boolean;
    particles: boolean;
    gradient: boolean;
  };
}

// Utility function
const cn = (...classes: (string | undefined | null | false)[]) => {
  return classes.filter(Boolean).join(" ");
};

// Mock data
const mockFileTree: FileNode[] = [
  {
    id: "1",
    name: "src",
    type: "folder",
    children: [
      {
        id: "2",
        name: "components",
        type: "folder",
        children: [
          { id: "3", name: "Header.tsx", type: "file", content: "import React from 'react';\n\nexport const Header = () => {\n  return <header>My App</header>;\n};", size: 1024 },
          { id: "4", name: "Footer.tsx", type: "file", content: "import React from 'react';\n\nexport const Footer = () => {\n  return <footer>Â© 2024</footer>;\n};", size: 512 }
        ]
      },
      { id: "5", name: "App.tsx", type: "file", content: "import React from 'react';\nimport { Header } from './components/Header';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <main>Hello World</main>\n    </div>\n  );\n}\n\nexport default App;", size: 2048 },
      { id: "6", name: "index.tsx", type: "file", content: "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root')!);\nroot.render(<App />);", size: 256 }
    ]
  },
  {
    id: "7",
    name: "public",
    type: "folder",
    children: [
      { id: "8", name: "index.html", type: "file", content: "<!DOCTYPE html>\n<html>\n<head>\n  <title>My App</title>\n</head>\n<body>\n  <div id=\"root\"></div>\n</body>\n</html>", size: 512 }
    ]
  },
  { id: "9", name: "package.json", type: "file", content: "{\n  \"name\": \"my-app\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"react\": \"^18.0.0\",\n    \"react-dom\": \"^18.0.0\"\n  }\n}", size: 1024 },
  { id: "10", name: "README.md", type: "file", content: "# My App\n\nA React application built with AI assistance.\n\n## Getting Started\n\nbash\nnpm install\nnpm start\n", size: 256 }
];

const mockTimelineSteps: TimelineStep[] = [
  {
    id: "1",
    title: "Environment Setup",
    description: "Initializing development environment",
    status: "completed",
    timestamp: new Date(Date.now() - 300000),
    duration: 30000,
    type: "info"
  },
  {
    id: "2",
    title: "Package Installation",
    description: "Installing React and dependencies",
    status: "completed",
    timestamp: new Date(Date.now() - 270000),
    duration: 45000,
    type: "package_installed"
  },
  {
    id: "3",
    title: "File Creation",
    description: "Creating component structure",
    status: "completed",
    timestamp: new Date(Date.now() - 225000),
    duration: 15000,
    type: "file_created"
  },
  {
    id: "4",
    title: "Build Process",
    description: "Compiling TypeScript and bundling",
    status: "in-progress",
    timestamp: new Date(Date.now() - 60000),
    type: "build_complete"
  },
  {
    id: "5",
    title: "Server Start",
    description: "Starting development server",
    status: "pending",
    timestamp: new Date(),
    type: "server_started"
  }
];

const mockChatMessages: ChatMessage[] = [
  {
    id: "1",
    content: "I need to build a React application with a header, footer, and main content area. Can you help me set this up?",
    role: "user",
    timestamp: new Date(Date.now() - 400000)
  },
  {
    id: "2",
    content: "I'll help you create a React application with the components you requested. Let me start by setting up the project structure and creating the necessary files.",
    role: "assistant",
    timestamp: new Date(Date.now() - 380000)
  },
  {
    id: "3",
    content: "Perfect! I can see the files being created. Can you also add some basic styling?",
    role: "user",
    timestamp: new Date(Date.now() - 200000)
  },
  {
    id: "4",
    content: "Absolutely! I'm now adding CSS modules and styling to your components. The build process is currently running to compile everything.",
    role: "assistant",
    timestamp: new Date(Date.now() - 180000)
  }
];

const themes: Theme[] = [
  {
    name: "Purple Neon Tokyo",
    colors: {
      primary: "#8B5CF6",
      secondary: "#A855F7",
      accent: "#EC4899",
      background: "#0F0F23",
      surface: "#1E1B4B",
      text: "#E5E7EB",
      border: "#6366F1"
    },
    effects: {
      glow: true,
      particles: true,
      gradient: true
    }
  },
  {
    name: "Daytime Blue Explosion",
    colors: {
      primary: "#3B82F6",
      secondary: "#60A5FA",
      accent: "#06B6D4",
      background: "#F0F9FF",
      surface: "#DBEAFE",
      text: "#1E293B",
      border: "#3B82F6"
    },
    effects: {
      glow: false,
      particles: false,
      gradient: true
    }
  },
  {
    name: "Pink Scrumptious",
    colors: {
      primary: "#EC4899",
      secondary: "#F472B6",
      accent: "#FB7185",
      background: "#FDF2F8",
      surface: "#FCE7F3",
      text: "#831843",
      border: "#EC4899"
    },
    effects: {
      glow: true,
      particles: false,
      gradient: true
    }
  },
  {
    name: "Orange Explosion",
    colors: {
      primary: "#F97316",
      secondary: "#FB923C",
      accent: "#FBBF24",
      background: "#FFF7ED",
      surface: "#FFEDD5",
      text: "#9A3412",
      border: "#F97316"
    },
    effects: {
      glow: true,
      particles: true,
      gradient: true
    }
  }
];

// Components
const FileTreeNode: React.FC<{
  node: FileNode;
  level: number;
  onFileSelect: (file: FileNode) => void;
  expandedFolders: Set<string>;
  onToggleFolder: (folderId: string) => void;
}> = ({ node, level, onFileSelect, expandedFolders, onToggleFolder }) => {
  const isExpanded = expandedFolders.has(node.id);
  const paddingLeft = level * 16;

  return (
    <div>
      <div
        className={cn(
          "flex items-center gap-2 py-1 px-2 hover:bg-white/5 cursor-pointer rounded text-sm",
          "transition-colors duration-200"
        )}
        style={{ paddingLeft }}
        onClick={() => {
          if (node.type === "folder") {
            onToggleFolder(node.id);
          } else {
            onFileSelect(node);
          }
        }}
      >
        {node.type === "folder" ? (
          isExpanded ? (
            <FolderOpen className="w-4 h-4 text-blue-400" />
          ) : (
            <Folder className="w-4 h-4 text-blue-400" />
          )
        ) : (
          <FileText className="w-4 h-4 text-gray-400" />
        )}
        <span className="text-white/90">{node.name}</span>
        {node.type === "file" && node.size && (
          <span className="text-xs text-white/50 ml-auto">
            {(node.size / 1024).toFixed(1)}KB
          </span>
        )}
      </div>
      {node.type === "folder" && isExpanded && node.children && (
        <div>
          {node.children.map((child) => (
            <FileTreeNode
              key={child.id}
              node={child}
              level={level + 1}
              onFileSelect={onFileSelect}
              expandedFolders={expandedFolders}
              onToggleFolder={onToggleFolder}
            />
          ))}
        </div>
      )}
    </div>
  );
};

const LiveTicker: React.FC<{ steps: TimelineStep[] }> = ({ steps }) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [isVisible, setIsVisible] = useState(true);

  useEffect(() => {
    const interval = setInterval(() => {
      const inProgressSteps = steps.filter(step => step.status === "in-progress");
      if (inProgressSteps.length > 0) {
        setCurrentStep(prev => (prev + 1) % inProgressSteps.length);
        setIsVisible(false);
        setTimeout(() => setIsVisible(true), 100);
      }
    }, 3000);

    return () => clearInterval(interval);
  }, [steps]);

  const inProgressSteps = steps.filter(step => step.status === "in-progress");
  if (inProgressSteps.length === 0) return null;

  const step = inProgressSteps[currentStep];

  return (
    <motion.div
      className="fixed bottom-4 right-4 bg-black/80 backdrop-blur-sm border border-white/20 rounded-lg p-3 max-w-xs"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: isVisible ? 1 : 0, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div className="flex items-center gap-2">
        <div className="w-2 h-2 bg-yellow-400 rounded-full animate-pulse" />
        <div>
          <div className="text-sm font-medium text-white">{step.title}</div>
          <div className="text-xs text-white/70">{step.description}</div>
        </div>
      </div>
    </motion.div>
  );
};

const EnvironmentSpinner: React.FC = () => {
  return (
    <div className="fixed inset-0 bg-black/90 backdrop-blur-sm flex items-center justify-center z-50">
      <div className="text-center">
        <motion.div
          className="w-32 h-32 border-4 border-purple-500/30 border-t-purple-500 rounded-full mx-auto mb-8"
          animate={{ rotate: 360 }}
          transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
        />
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
        >
          <h2 className="text-2xl font-bold text-white mb-4">Spinning up environment...</h2>
          <p className="text-white/70">Setting up your development workspace</p>
        </motion.div>
        <motion.div
          className="mt-8 flex justify-center gap-2"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1 }}
        >
          {[0, 1, 2].map((i) => (
            <motion.div
              key={i}
              className="w-3 h-3 bg-purple-500 rounded-full"
              animate={{
                scale: [1, 1.2, 1],
                opacity: [0.5, 1, 0.5]
              }}
              transition={{
                duration: 1.5,
                repeat: Infinity,
                delay: i * 0.2
              }}
            />
          ))}
        </motion.div>
      </div>
    </div>
  );
};

const ChatBubble: React.FC<{ message: ChatMessage; isLast: boolean }> = ({ message, isLast }) => {
  const isUser = message.role === "user";

  return (
    <motion.div
      className={cn("flex gap-3 mb-4", isUser ? "justify-end" : "justify-start")}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      {!isUser && (
        <div className="w-8 h-8 rounded-full bg-purple-500 flex items-center justify-center flex-shrink-0">
          <Bot className="w-4 h-4 text-white" />
        </div>
      )}
      <div
        className={cn(
          "max-w-[70%] rounded-2xl px-4 py-3",
          isUser
            ? "bg-purple-500 text-white"
            : "bg-white/10 backdrop-blur-sm text-white border border-white/20"
        )}
      >
        <p className="text-sm leading-relaxed">{message.content}</p>
        <div className="text-xs opacity-70 mt-2">
          {message.timestamp.toLocaleTimeString()}
        </div>
      </div>
      {isUser && (
        <div className="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center flex-shrink-0">
          <User className="w-4 h-4 text-white" />
        </div>
      )}
    </motion.div>
  );
};

const AutonomousAIAgent: React.FC = () => {
  const [leftPanelOpen, setLeftPanelOpen] = useState(false);
  const [rightPanelOpen, setRightPanelOpen] = useState(false);
  const [selectedFile, setSelectedFile] = useState<FileNode | null>(null);
  const [expandedFolders, setExpandedFolders] = useState<Set<string>>(new Set(["1"]));
  const [currentTheme, setCurrentTheme] = useState(0);
  const [showEnvironmentSpinner, setShowEnvironmentSpinner] = useState(false);
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>(mockChatMessages);
  const [inputValue, setInputValue] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [dragOver, setDragOver] = useState(false);
  const [activeView, setActiveView] = useState<"files" | "preview">("files");
  const [timelineSteps, setTimelineSteps] = useState<TimelineStep[]>(mockTimelineSteps);
  
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const theme = themes[currentTheme];

  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [chatMessages]);

  useEffect(() => {
    const interval = setInterval(() => {
      setTimelineSteps(prev => prev.map(step => {
        if (step.status === "in-progress" && Math.random() > 0.7) {
          return { ...step, status: "completed" as const };
        }
        return step;
      }));
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const toggleLeftPanel = () => {
    setLeftPanelOpen(!leftPanelOpen);
  };

  const toggleRightPanel = () => {
    setRightPanelOpen(!rightPanelOpen);
  };

  const toggleFolder = (folderId: string) => {
    setExpandedFolders(prev => {
      const newSet = new Set(prev);
      if (newSet.has(folderId)) {
        newSet.delete(folderId);
      } else {
        newSet.add(folderId);
      }
      return newSet;
    });
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      content: inputValue,
      role: "user",
      timestamp: new Date()
    };

    setChatMessages(prev => [...prev, userMessage]);
    setInputValue("");
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const aiMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        content: "I'm working on that for you. Let me analyze your request and start building the solution.",
        role: "assistant",
        timestamp: new Date()
      };
      setChatMessages(prev => [...prev, aiMessage]);
      setIsTyping(false);
    }, 2000);
  };

  const handleFileUpload = (files: FileList) => {
    // Handle file upload logic here
    console.log("Files uploaded:", files);
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      handleFileUpload(files);
    }
  };

  const downloadFile = (file: FileNode) => {
    const blob = new Blob([file.content || ""], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = file.name;
    a.click();
    URL.revokeObjectURL(url);
  };

  const downloadProject = () => {
    // Create a zip file with all project files
    console.log("Downloading project...");
  };

  const startEnvironment = () => {
    setShowEnvironmentSpinner(true);
    setTimeout(() => {
      setShowEnvironmentSpinner(false);
    }, 3000);
  };

  return (
    <div 
      className="h-screen w-screen overflow-hidden relative"
      style={{ 
        background: theme.colors.background,
        color: theme.colors.text 
      }}
    >
      {/* Background Effects */}
      {theme.effects.gradient && (
        <div className="absolute inset-0 opacity-20">
          <div 
            className="absolute top-0 left-0 w-1/3 h-1/3 rounded-full blur-3xl"
            style={{ backgroundColor: theme.colors.primary }}
          />
          <div 
            className="absolute bottom-0 right-0 w-1/3 h-1/3 rounded-full blur-3xl"
            style={{ backgroundColor: theme.colors.secondary }}
          />
          <div 
            className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-1/4 h-1/4 rounded-full blur-3xl"
            style={{ backgroundColor: theme.colors.accent }}
          />
        </div>
      )}

      {/* Theme Selector */}
      <div className="absolute top-4 right-4 z-50">
        <select
          value={currentTheme}
          onChange={(e) => setCurrentTheme(Number(e.target.value))}
          className="bg-black/50 backdrop-blur-sm border border-white/20 rounded-lg px-3 py-2 text-white text-sm"
        >
          {themes.map((theme, index) => (
            <option key={index} value={index} className="bg-black">
              {theme.name}
            </option>
          ))}
        </select>
      </div>

      {/* Left Panel Toggle */}
      <motion.button
        className={cn(
          "fixed left-4 top-1/2 transform -translate-y-1/2 z-40 p-3 rounded-full backdrop-blur-sm border transition-all duration-300",
          leftPanelOpen ? "bg-white/20" : "bg-black/50"
        )}
        style={{ borderColor: theme.colors.border }}
        onClick={toggleLeftPanel}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
      >
        <ChevronLeft className={cn("w-5 h-5 transition-transform", leftPanelOpen && "rotate-180")} />
      </motion.button>

      {/* Right Panel Toggle */}
      <motion.button
        className={cn(
          "fixed right-4 top-1/2 transform -translate-y-1/2 z-40 p-3 rounded-full backdrop-blur-sm border transition-all duration-300",
          rightPanelOpen ? "bg-white/20" : "bg-black/50"
        )}
        style={{ borderColor: theme.colors.border }}
        onClick={toggleRightPanel}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
      >
        <ChevronRight className={cn("w-5 h-5 transition-transform", rightPanelOpen && "rotate-180")} />
      </motion.button>

      {/* Left Panel - File Tree */}
      <AnimatePresence>
        {leftPanelOpen && (
          <motion.div
            className="fixed left-0 top-0 h-full w-80 backdrop-blur-xl border-r z-30"
            style={{ 
              backgroundColor: theme.colors.surface + "80",
              borderColor: theme.colors.border 
            }}
            initial={{ x: -320 }}
            animate={{ x: 0 }}
            exit={{ x: -320 }}
            transition={{ type: "spring", damping: 25, stiffness: 200 }}
          >
            <div className="p-4 border-b" style={{ borderColor: theme.colors.border }}>
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-semibold">Project Files</h2>
                <button
                  onClick={downloadProject}
                  className="p-2 rounded-lg hover:bg-white/10 transition-colors"
                >
                  <Download className="w-4 h-4" />
                </button>
              </div>
              <div className="flex gap-2">
                <button
                  onClick={() => setActiveView("files")}
                  className={cn(
                    "px-3 py-1 rounded-md text-sm transition-colors",
                    activeView === "files" ? "bg-white/20" : "hover:bg-white/10"
                  )}
                >
                  Files
                </button>
                <button
                  onClick={() => setActiveView("preview")}
                  className={cn(
                    "px-3 py-1 rounded-md text-sm transition-colors",
                    activeView === "preview" ? "bg-white/20" : "hover:bg-white/10"
                  )}
                >
                  Preview
                </button>
              </div>
            </div>
            
            <div className="flex-1 overflow-y-auto p-4">
              {activeView === "files" ? (
                <div className="space-y-1">
                  {mockFileTree.map((node) => (
                    <FileTreeNode
                      key={node.id}
                      node={node}
                      level={0}
                      onFileSelect={setSelectedFile}
                      expandedFolders={expandedFolders}
                      onToggleFolder={toggleFolder}
                    />
                  ))}
                </div>
              ) : (
                <div className="bg-white/5 rounded-lg p-4 border" style={{ borderColor: theme.colors.border }}>
                  <div className="flex items-center gap-2 mb-4">
                    <Monitor className="w-5 h-5" />
                    <span className="font-medium">Live Preview</span>
                  </div>
                  <div className="bg-white rounded-lg p-4 text-black min-h-[200px]">
                    <header className="border-b pb-2 mb-4">
                      <h1 className="text-xl font-bold">My App</h1>
                    </header>
                    <main>
                      <p>Hello World</p>
                    </main>
                    <footer className="border-t pt-2 mt-4 text-sm text-gray-600">
                      Â© 2024
                    </footer>
                  </div>
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Right Panel - Timeline & Code View */}
      <AnimatePresence>
        {rightPanelOpen && (
          <motion.div
            className="fixed right-0 top-0 h-full w-80 backdrop-blur-xl border-l z-30"
            style={{ 
              backgroundColor: theme.colors.surface + "80",
              borderColor: theme.colors.border 
            }}
            initial={{ x: 320 }}
            animate={{ x: 0 }}
            exit={{ x: 320 }}
            transition={{ type: "spring", damping: 25, stiffness: 200 }}
          >
            <div className="p-4 border-b" style={{ borderColor: theme.colors.border }}>
              <div className="flex items-center gap-2 mb-4">
                <Clock className="w-5 h-5" />
                <h2 className="text-lg font-semibold">Timeline</h2>
              </div>
            </div>
            
            <div className="flex-1 overflow-y-auto p-4">
              <div className="space-y-4">
                {timelineSteps.map((step, index) => (
                  <motion.div
                    key={step.id}
                    className="flex gap-3"
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <div className="flex flex-col items-center">
                      <div className={cn(
                        "w-8 h-8 rounded-full flex items-center justify-center border-2",
                        step.status === "completed" && "bg-green-500 border-green-500",
                        step.status === "in-progress" && "bg-yellow-500 border-yellow-500 animate-pulse",
                        step.status === "pending" && "bg-gray-500 border-gray-500"
                      )}>
                        {step.status === "completed" && <CheckCircle className="w-4 h-4 text-white" />}
                        {step.status === "in-progress" && <Clock className="w-4 h-4 text-white" />}
                        {step.status === "pending" && <Circle className="w-4 h-4 text-white" />}
                      </div>
                      {index < timelineSteps.length - 1 && (
                        <div className="w-0.5 h-8 bg-white/20 mt-2" />
                      )}
                    </div>
                    <div className="flex-1 pb-4">
                      <h3 className="font-medium text-sm">{step.title}</h3>
                      <p className="text-xs text-white/70 mt-1">{step.description}</p>
                      <div className="text-xs text-white/50 mt-2">
                        {step.timestamp.toLocaleTimeString()}
                        {step.duration && (
                          <span className="ml-2">({(step.duration / 1000).toFixed(1)}s)</span>
                        )}
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>

              {selectedFile && (
                <div className="mt-8 bg-white/5 rounded-lg p-4 border" style={{ borderColor: theme.colors.border }}>
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center gap-2">
                      <Code className="w-4 h-4" />
                      <span className="font-medium text-sm">{selectedFile.name}</span>
                    </div>
                    <button
                      onClick={() => downloadFile(selectedFile)}
                      className="p-1 rounded hover:bg-white/10 transition-colors"
                    >
                      <Download className="w-4 h-4" />
                    </button>
                  </div>
                  <pre className="text-xs bg-black/30 rounded p-3 overflow-x-auto">
                    <code>{selectedFile.content}</code>
                  </pre>
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Central Chat Interface */}
      <div className={cn(
        "flex flex-col h-full transition-all duration-300",
        leftPanelOpen && "ml-80",
        rightPanelOpen && "mr-80"
      )}>
        {/* Header */}
        <div className="p-6 border-b backdrop-blur-sm" style={{ borderColor: theme.colors.border }}>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center">
                <Zap className="w-5 h-5 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold">AI Development Agent</h1>
                <p className="text-sm opacity-70">Building full-stack applications autonomously</p>
              </div>
            </div>
            <button
              onClick={startEnvironment}
              className="px-4 py-2 rounded-lg bg-purple-500 hover:bg-purple-600 transition-colors flex items-center gap-2"
            >
              <Play className="w-4 h-4" />
              Start Environment
            </button>
          </div>
        </div>

        {/* Chat Messages */}
        <div 
          ref={chatContainerRef}
          className="flex-1 overflow-y-auto p-6"
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
        >
          {chatMessages.map((message, index) => (
            <ChatBubble 
              key={message.id} 
              message={message} 
              isLast={index === chatMessages.length - 1}
            />
          ))}
          
          {isTyping && (
            <motion.div
              className="flex gap-3 mb-4"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
            >
              <div className="w-8 h-8 rounded-full bg-purple-500 flex items-center justify-center flex-shrink-0">
                <Bot className="w-4 h-4 text-white" />
              </div>
              <div className="bg-white/10 backdrop-blur-sm rounded-2xl px-4 py-3 border border-white/20">
                <div className="flex gap-1">
                  {[0, 1, 2].map((i) => (
                    <motion.div
                      key={i}
                      className="w-2 h-2 bg-white/70 rounded-full"
                      animate={{
                        scale: [1, 1.2, 1],
                        opacity: [0.5, 1, 0.5]
                      }}
                      transition={{
                        duration: 1,
                        repeat: Infinity,
                        delay: i * 0.2
                      }}
                    />
                  ))}
                </div>
              </div>
            </motion.div>
          )}

          {dragOver && (
            <motion.div
              className="fixed inset-0 bg-purple-500/20 backdrop-blur-sm flex items-center justify-center z-20"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
            >
              <div className="text-center">
                <Upload className="w-16 h-16 mx-auto mb-4 text-purple-400" />
                <p className="text-xl font-semibold">Drop files here to upload</p>
              </div>
            </motion.div>
          )}
        </div>

        {/* Input Area */}
        <div className="p-6 border-t backdrop-blur-sm" style={{ borderColor: theme.colors.border }}>
          <div className="flex gap-4 items-end">
            <div className="flex-1 relative">
              <textarea
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Describe what you want to build..."
                className="w-full p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 text-white placeholder-white/50 resize-none focus:outline-none focus:ring-2 focus:ring-purple-500 min-h-[60px] max-h-[200px]"
                onKeyDown={(e) => {
                  if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault();
                    handleSendMessage();
                  }
                }}
              />
              <div className="absolute bottom-4 left-4 flex gap-2">
                <button
                  onClick={() => fileInputRef.current?.click()}
                  className="p-2 rounded-lg hover:bg-white/10 transition-colors"
                >
                  <Paperclip className="w-4 h-4" />
                </button>
                <button className="p-2 rounded-lg hover:bg-white/10 transition-colors">
                  <Image className="w-4 h-4" />
                </button>
                <button className="p-2 rounded-lg hover:bg-white/10 transition-colors">
                  <Mic className="w-4 h-4" />
                </button>
              </div>
            </div>
            <button
              onClick={handleSendMessage}
              disabled={!inputValue.trim()}
              className="p-4 rounded-2xl bg-purple-500 hover:bg-purple-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <Send className="w-5 h-5" />
            </button>
          </div>
        </div>
      </div>

      {/* Hidden file input */}
      <input
        ref={fileInputRef}
        type="file"
        multiple
        className="hidden"
        onChange={(e) => {
          if (e.target.files) {
            handleFileUpload(e.target.files);
          }
        }}
      />

      {/* Live Ticker */}
      <LiveTicker steps={timelineSteps} />

      {/* Environment Spinner */}
      <AnimatePresence>
        {showEnvironmentSpinner && <EnvironmentSpinner />}
      </AnimatePresence>
    </div>
  );
};

export default AutonomousAIAgent;
