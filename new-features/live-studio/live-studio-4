"use client";

import React, { useState, useRef, useEffect, useCallback, useMemo } from "react";
import { Canvas, useFrame, useThree } from "@react-three/fiber";
import * as THREE from "three";
import { motion, AnimatePresence } from "framer-motion";
import { 
  Mic, 
  MicOff, 
  Video, 
  VideoOff, 
  Monitor, 
  MonitorSpeaker, 
  Settings, 
  Upload, 
  Image, 
  Smile, 
  Copy, 
  MoreVertical,
  Send,
  Square,
  ChevronRight,
  ChevronLeft,
  Sparkles,
  Cloud,
  Moon,
  Sun,
  Palette
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { Label } from "@/components/ui/label";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Switch } from "@/components/ui/switch";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";

// Enhanced Slider Component
const EnhancedSlider = React.forwardRef<
  React.ElementRef<typeof Slider>,
  React.ComponentPropsWithoutRef<typeof Slider> & {
    showTooltip?: boolean;
    tooltipContent?: (value: number) => React.ReactNode;
  }
>(({ className, showTooltip = false, tooltipContent, ...props }, ref) => {
  const [showTooltipState, setShowTooltipState] = React.useState(false);
  const [internalValue, setInternalValue] = React.useState<number[]>(
    (props.defaultValue as number[]) ?? (props.value as number[]) ?? [0],
  );

  React.useEffect(() => {
    if (props.value !== undefined) {
      setInternalValue(props.value as number[]);
    }
  }, [props.value]);

  const handleValueChange = (newValue: number[]) => {
    setInternalValue(newValue);
    props.onValueChange?.(newValue);
  };

  return (
    <Slider
      ref={ref}
      className={className}
      onValueChange={handleValueChange}
      {...props}
    />
  );
});
EnhancedSlider.displayName = "EnhancedSlider";

// Canvas Effect Component
const CanvasRevealEffect = ({
  animationSpeed = 0.4,
  opacities = [0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1],
  colors = [[0, 255, 255]],
  containerClassName,
  dotSize,
}: {
  animationSpeed?: number;
  opacities?: number[];
  colors?: number[][];
  containerClassName?: string;
  dotSize?: number;
}) => {
  return (
    <div className={cn("absolute inset-0 h-full w-full", containerClassName)}>
      <div className="h-full w-full">
        <DotMatrix
          colors={colors ?? [[0, 255, 255]]}
          dotSize={dotSize ?? 3}
          opacities={opacities ?? [0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1]}
          shader={`
            float animation_speed_factor = ${animationSpeed.toFixed(1)};
            float intro_offset = distance(u_resolution / 2.0 / u_total_size, st2) * 0.01 + (random(st2) * 0.15);
            opacity *= step(intro_offset, u_time * animation_speed_factor);
            opacity *= clamp((1.0 - step(intro_offset + 0.1, u_time * animation_speed_factor)) * 1.25, 1.0, 1.25);
          `}
          center={["x", "y"]}
        />
      </div>
    </div>
  );
};

const DotMatrix: React.FC<{
  colors?: number[][];
  opacities?: number[];
  totalSize?: number;
  dotSize?: number;
  shader?: string;
  center?: ("x" | "y")[];
}> = ({
  colors = [[0, 0, 0]],
  opacities = [0.04, 0.04, 0.04, 0.04, 0.04, 0.08, 0.08, 0.08, 0.08, 0.14],
  totalSize = 4,
  dotSize = 2,
  shader = "",
  center = ["x", "y"],
}) => {
  const uniforms = React.useMemo(() => {
    let colorsArray = [colors[0], colors[0], colors[0], colors[0], colors[0], colors[0]];
    if (colors.length === 2) {
      colorsArray = [colors[0], colors[0], colors[0], colors[1], colors[1], colors[1]];
    } else if (colors.length === 3) {
      colorsArray = [colors[0], colors[0], colors[1], colors[1], colors[2], colors[2]];
    }

    return {
      u_colors: {
        value: colorsArray.map((color) => [color[0] / 255, color[1] / 255, color[2] / 255]),
        type: "uniform3fv",
      },
      u_opacities: { value: opacities, type: "uniform1fv" },
      u_total_size: { value: totalSize, type: "uniform1f" },
      u_dot_size: { value: dotSize, type: "uniform1f" },
    };
  }, [colors, opacities, totalSize, dotSize]);

  return (
    <ShaderComponent
      source={`
        precision mediump float;
        in vec2 fragCoord;
        uniform float u_time;
        uniform float u_opacities[10];
        uniform vec3 u_colors[6];
        uniform float u_total_size;
        uniform float u_dot_size;
        uniform vec2 u_resolution;
        out vec4 fragColor;
        float PHI = 1.61803398874989484820459;
        float random(vec2 xy) {
            return fract(tan(distance(xy * PHI, xy) * 0.5) * xy.x);
        }
        void main() {
            vec2 st = fragCoord.xy;
            ${center.includes("x") ? "st.x -= abs(floor((mod(u_resolution.x, u_total_size) - u_dot_size) * 0.5));" : ""}
            ${center.includes("y") ? "st.y -= abs(floor((mod(u_resolution.y, u_total_size) - u_dot_size) * 0.5));" : ""}
            float opacity = step(0.0, st.x);
            opacity *= step(0.0, st.y);
            vec2 st2 = vec2(int(st.x / u_total_size), int(st.y / u_total_size));
            float frequency = 5.0;
            float show_offset = random(st2);
            float rand = random(st2 * floor((u_time / frequency) + show_offset + frequency) + 1.0);
            opacity *= u_opacities[int(rand * 10.0)];
            opacity *= 1.0 - step(u_dot_size / u_total_size, fract(st.x / u_total_size));
            opacity *= 1.0 - step(u_dot_size / u_total_size, fract(st.y / u_total_size));
            vec3 color = u_colors[int(show_offset * 6.0)];
            ${shader}
            fragColor = vec4(color, opacity);
            fragColor.rgb *= fragColor.a;
        }
      `}
      uniforms={uniforms}
      maxFps={60}
    />
  );
};

const ShaderMaterial = ({ source, uniforms, maxFps = 60 }: {
  source: string;
  uniforms: Record<string, { value: number[] | number[][] | number; type: string; }>;
  maxFps?: number;
}) => {
  const { size } = useThree();
  const ref = useRef<THREE.Mesh>();
  let lastFrameTime = 0;

  useFrame(({ clock }) => {
    if (!ref.current) return;
    const timestamp = clock.getElapsedTime();
    if (timestamp - lastFrameTime < 1 / maxFps) return;
    lastFrameTime = timestamp;
    const material: any = ref.current.material;
    const timeLocation = material.uniforms.u_time;
    timeLocation.value = timestamp;
  });

  const getUniforms = () => {
    const preparedUniforms: any = {};
    for (const uniformName in uniforms) {
      const uniform: any = uniforms[uniformName];
      switch (uniform.type) {
        case "uniform1f":
          preparedUniforms[uniformName] = { value: uniform.value, type: "1f" };
          break;
        case "uniform3f":
          preparedUniforms[uniformName] = {
            value: new THREE.Vector3().fromArray(uniform.value),
            type: "3f",
          };
          break;
        case "uniform1fv":
          preparedUniforms[uniformName] = { value: uniform.value, type: "1fv" };
          break;
        case "uniform3fv":
          preparedUniforms[uniformName] = {
            value: uniform.value.map((v: number[]) => new THREE.Vector3().fromArray(v)),
            type: "3fv",
          };
          break;
        case "uniform2f":
          preparedUniforms[uniformName] = {
            value: new THREE.Vector2().fromArray(uniform.value),
            type: "2f",
          };
          break;
      }
    }
    preparedUniforms.u_time = { value: 0, type: "1f" };
    preparedUniforms.u_resolution = {
      value: new THREE.Vector2(size.width * 2, size.height * 2),
    };
    return preparedUniforms;
  };

  const material = useMemo(() => {
    return new THREE.ShaderMaterial({
      vertexShader: `
        precision mediump float;
        in vec2 coordinates;
        uniform vec2 u_resolution;
        out vec2 fragCoord;
        void main(){
          float x = position.x;
          float y = position.y;
          gl_Position = vec4(x, y, 0.0, 1.0);
          fragCoord = (position.xy + vec2(1.0)) * 0.5 * u_resolution;
          fragCoord.y = u_resolution.y - fragCoord.y;
        }
      `,
      fragmentShader: source,
      uniforms: getUniforms(),
      glslVersion: THREE.GLSL3,
      blending: THREE.CustomBlending,
      blendSrc: THREE.SrcAlphaFactor,
      blendDst: THREE.OneFactor,
    });
  }, [size.width, size.height, source]);

  return (
    <mesh ref={ref as any}>
      <planeGeometry args={[2, 2]} />
      <primitive object={material} attach="material" />
    </mesh>
  );
};

const ShaderComponent: React.FC<{
  source: string;
  uniforms: Record<string, { value: number[] | number[][] | number; type: string; }>;
  maxFps?: number;
}> = ({ source, uniforms, maxFps = 60 }) => {
  return (
    <Canvas className="absolute inset-0 h-full w-full">
      <ShaderMaterial source={source} uniforms={uniforms} maxFps={maxFps} />
    </Canvas>
  );
};

// Chat Bubble Components
interface ChatBubbleProps {
  variant?: "sent" | "received";
  className?: string;
  children: React.ReactNode;
}

const ChatBubble = ({ variant = "received", className, children }: ChatBubbleProps) => {
  return (
    <div className={cn("flex items-start gap-2 mb-4", variant === "sent" && "flex-row-reverse", className)}>
      {children}
    </div>
  );
};

const ChatBubbleMessage = ({ 
  variant = "received", 
  isLoading, 
  className, 
  children 
}: {
  variant?: "sent" | "received";
  isLoading?: boolean;
  className?: string;
  children?: React.ReactNode;
}) => {
  return (
    <div className={cn(
      "rounded-lg p-3 max-w-xs",
      variant === "sent" ? "bg-purple-600 text-white" : "bg-muted",
      className
    )}>
      {isLoading ? (
        <div className="flex items-center space-x-2">
          <div className="flex space-x-1">
            <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: "0ms" }} />
            <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: "150ms" }} />
            <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: "300ms" }} />
          </div>
        </div>
      ) : (
        children
      )}
    </div>
  );
};

const ChatBubbleAvatar = ({ src, fallback = "AI", className }: {
  src?: string;
  fallback?: string;
  className?: string;
}) => {
  return (
    <Avatar className={cn("h-8 w-8", className)}>
      {src && <AvatarImage src={src} />}
      <AvatarFallback>{fallback}</AvatarFallback>
    </Avatar>
  );
};

// Voice Input Component
const AIVoiceInput = ({
  onStart,
  onStop,
  visualizerBars = 48,
  isRecording = false,
  className
}: {
  onStart?: () => void;
  onStop?: (duration: number) => void;
  visualizerBars?: number;
  isRecording?: boolean;
  className?: string;
}) => {
  const [time, setTime] = useState(0);

  useEffect(() => {
    let intervalId: NodeJS.Timeout;
    if (isRecording) {
      intervalId = setInterval(() => setTime((t) => t + 1), 1000);
    } else {
      setTime(0);
    }
    return () => clearInterval(intervalId);
  }, [isRecording]);

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
  };

  return (
    <div className={cn("flex items-center gap-3", className)}>
      <div className="h-4 w-32 flex items-center justify-center gap-0.5">
        {[...Array(visualizerBars)].map((_, i) => (
          <div
            key={i}
            className={cn(
              "w-0.5 rounded-full transition-all duration-300",
              isRecording
                ? "bg-purple-500 animate-pulse"
                : "bg-muted h-1"
            )}
            style={
              isRecording
                ? {
                    height: `${20 + Math.random() * 80}%`,
                    animationDelay: `${i * 0.05}s`,
                  }
                : undefined
            }
          />
        ))}
      </div>
      <span className="font-mono text-sm text-muted-foreground">
        {formatTime(time)}
      </span>
    </div>
  );
};

// Live Chat Bubble Component
const LiveChatBubble = ({ message, isVisible }: { message: string; isVisible: boolean }) => {
  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ opacity: 0, scale: 0.8, y: 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.8, y: -20 }}
          transition={{ duration: 0.3 }}
          className="fixed bottom-20 left-1/2 transform -translate-x-1/2 bg-purple-600 text-white px-4 py-2 rounded-full shadow-lg z-50"
        >
          {message}
        </motion.div>
      )}
    </AnimatePresence>
  );
};

// Main Component
const GeminiLiveAPIStudio = () => {
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [selectedModel, setSelectedModel] = useState("gemini-1.5-pro");
  const [selectedVoice, setSelectedVoice] = useState("alloy");
  const [temperature, setTemperature] = useState([0.7]);
  const [isRecording, setIsRecording] = useState(false);
  const [isVideoOn, setIsVideoOn] = useState(false);
  const [isScreenSharing, setIsScreenSharing] = useState(false);
  const [isDesktopSharing, setIsDesktopSharing] = useState(false);
  const [functionCalling, setFunctionCalling] = useState(false);
  const [webSearch, setWebSearch] = useState(false);
  const [rag, setRag] = useState(false);
  const [currentTheme, setCurrentTheme] = useState("purple-haze");
  const [input, setInput] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [liveChatVisible, setLiveChatVisible] = useState(false);
  const [liveChatMessage, setLiveChatMessage] = useState("");

  const [messages, setMessages] = useState([
    { id: "1", content: "Hello! I'm Gemini. How can I help you today?", role: "assistant" },
  ]);

  const [chatHistory] = useState([
    { id: "1", title: "Creative Writing Tips", timestamp: "2 hours ago" },
    { id: "2", title: "Python Data Analysis", timestamp: "1 day ago" },
    { id: "3", title: "Travel Planning", timestamp: "2 days ago" },
    { id: "4", title: "Recipe Ideas", timestamp: "3 days ago" },
    { id: "5", title: "Workout Routine", timestamp: "1 week ago" },
  ]);

  const themes = {
    "purple-haze": {
      name: "Purple Haze",
      gradient: "from-purple-600 via-pink-600 to-blue-600",
      colors: [[147, 51, 234], [219, 39, 119], [59, 130, 246]]
    },
    "midnight-sky": {
      name: "Midnight Sky",
      gradient: "from-slate-900 via-purple-900 to-slate-900",
      colors: [[15, 23, 42], [88, 28, 135], [15, 23, 42]]
    },
    "daytime-clouds": {
      name: "Daytime Clouds",
      gradient: "from-blue-400 via-white to-blue-300",
      colors: [[96, 165, 250], [255, 255, 255], [147, 197, 253]]
    }
  };

  const handleSendMessage = () => {
    if (!input.trim()) return;
    
    const newMessage = {
      id: Date.now().toString(),
      content: input,
      role: "user"
    };
    
    setMessages(prev => [...prev, newMessage]);
    setInput("");
    setIsGenerating(true);
    
    // Simulate AI response
    setTimeout(() => {
      const aiResponse = {
        id: (Date.now() + 1).toString(),
        content: "I understand your question. Let me help you with that...",
        role: "assistant"
      };
      setMessages(prev => [...prev, aiResponse]);
      setIsGenerating(false);
    }, 2000);
  };

  const handleVoiceToggle = () => {
    setIsRecording(!isRecording);
    if (!isRecording) {
      // Start live chat simulation
      setLiveChatVisible(true);
      setLiveChatMessage("Listening...");
      setTimeout(() => {
        setLiveChatMessage("Processing your voice...");
        setTimeout(() => {
          setLiveChatVisible(false);
        }, 2000);
      }, 1500);
    } else {
      setLiveChatVisible(false);
    }
  };

  const currentThemeConfig = themes[currentTheme as keyof typeof themes];

  return (
    <TooltipProvider>
      <div className="flex h-screen bg-background relative overflow-hidden">
        {/* Background Effect */}
        <div className="absolute inset-0 z-0">
          <CanvasRevealEffect
            animationSpeed={0.3}
            containerClassName="opacity-20"
            colors={currentThemeConfig.colors}
            opacities={[0.1, 0.2, 0.3, 0.4, 0.5]}
            dotSize={1}
          />
        </div>

        {/* Left Sidebar - Chat History */}
        <motion.div
          initial={false}
          animate={{ width: sidebarOpen ? 280 : 0 }}
          transition={{ duration: 0.3 }}
          className="bg-background/95 backdrop-blur-sm border-r border-border z-10 overflow-hidden"
        >
          <div className="p-4 border-b border-border">
            <h2 className="font-semibold text-lg">Chat History</h2>
          </div>
          <ScrollArea className="h-[calc(100vh-80px)]">
            <div className="p-2 space-y-2">
              {chatHistory.map((chat) => (
                <div
                  key={chat.id}
                  className="p-3 rounded-lg hover:bg-muted/50 cursor-pointer transition-colors"
                >
                  <div className="font-medium text-sm truncate">{chat.title}</div>
                  <div className="text-xs text-muted-foreground">{chat.timestamp}</div>
                </div>
              ))}
            </div>
          </ScrollArea>
        </motion.div>

        {/* Main Chat Area */}
        <div className="flex-1 flex flex-col z-10">
          {/* Header */}
          <div className="border-b border-border bg-background/95 backdrop-blur-sm p-4 flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setSidebarOpen(!sidebarOpen)}
              >
                {sidebarOpen ? <ChevronLeft className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
              </Button>
              <div className="flex items-center gap-2">
                <Sparkles className="h-5 w-5 text-purple-600" />
                <h1 className="text-xl font-bold">Gemini Live Studio</h1>
              </div>
            </div>
            
            {/* Media Controls */}
            <div className="flex items-center gap-2">
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant={isRecording ? "default" : "outline"}
                    size="icon"
                    onClick={handleVoiceToggle}
                    className={cn(
                      "relative",
                      isRecording && "bg-red-600 hover:bg-red-700 text-white animate-pulse"
                    )}
                  >
                    {isRecording ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  {isRecording ? "Stop Recording" : "Start Voice Chat"}
                </TooltipContent>
              </Tooltip>

              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant={isVideoOn ? "default" : "outline"}
                    size="icon"
                    onClick={() => setIsVideoOn(!isVideoOn)}
                  >
                    {isVideoOn ? <VideoOff className="h-4 w-4" /> : <Video className="h-4 w-4" />}
                  </Button>
                </TooltipTrigger>
                <TooltipContent>Toggle Video</TooltipContent>
              </Tooltip>

              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant={isScreenSharing ? "default" : "outline"}
                    size="icon"
                    onClick={() => setIsScreenSharing(!isScreenSharing)}
                  >
                    <Monitor className="h-4 w-4" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>Share Screen</TooltipContent>
              </Tooltip>

              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant={isDesktopSharing ? "default" : "outline"}
                    size="icon"
                    onClick={() => setIsDesktopSharing(!isDesktopSharing)}
                  >
                    <MonitorSpeaker className="h-4 w-4" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>Share Desktop Window</TooltipContent>
              </Tooltip>
            </div>
          </div>

          {/* Chat Messages */}
          <ScrollArea className="flex-1 p-4">
            <div className="max-w-4xl mx-auto space-y-4">
              {messages.map((message) => (
                <ChatBubble key={message.id} variant={message.role === "user" ? "sent" : "received"}>
                  <ChatBubbleAvatar 
                    fallback={message.role === "user" ? "U" : "G"}
                    className={message.role === "user" ? "bg-purple-600 text-white" : "bg-muted"}
                  />
                  <ChatBubbleMessage variant={message.role === "user" ? "sent" : "received"}>
                    {message.content}
                  </ChatBubbleMessage>
                </ChatBubble>
              ))}
              
              {isGenerating && (
                <ChatBubble variant="received">
                  <ChatBubbleAvatar fallback="G" className="bg-muted" />
                  <ChatBubbleMessage isLoading />
                </ChatBubble>
              )}
            </div>
          </ScrollArea>

          {/* Voice Visualizer */}
          {isRecording && (
            <div className="p-4 border-t border-border bg-background/95 backdrop-blur-sm">
              <AIVoiceInput
                isRecording={isRecording}
                className="justify-center"
              />
            </div>
          )}

          {/* Input Area */}
          <div className="border-t border-border bg-background/95 backdrop-blur-sm p-4">
            <div className="max-w-4xl mx-auto">
              <div className="flex items-end gap-2">
                <div className="flex-1 relative">
                  <Textarea
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="Type your message..."
                    className="min-h-[60px] pr-20 resize-none"
                    onKeyDown={(e) => {
                      if (e.key === "Enter" && !e.shiftKey) {
                        e.preventDefault();
                        handleSendMessage();
                      }
                    }}
                  />
                  <div className="absolute right-2 bottom-2 flex items-center gap-1">
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button variant="ghost" size="icon" className="h-8 w-8">
                          <Upload className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>Upload File</TooltipContent>
                    </Tooltip>
                    
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button variant="ghost" size="icon" className="h-8 w-8">
                          <Image className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>Upload Image</TooltipContent>
                    </Tooltip>
                    
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button variant="ghost" size="icon" className="h-8 w-8">
                          <Smile className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>Emoji</TooltipContent>
                    </Tooltip>
                  </div>
                </div>
                
                <Button
                  onClick={isGenerating ? () => setIsGenerating(false) : handleSendMessage}
                  disabled={!input.trim() && !isGenerating}
                  className={cn(
                    "h-[60px] px-6",
                    isGenerating ? "bg-red-600 hover:bg-red-700" : "bg-purple-600 hover:bg-purple-700"
                  )}
                >
                  {isGenerating ? <Square className="h-4 w-4" /> : <Send className="h-4 w-4" />}
                </Button>
              </div>
            </div>
          </div>
        </div>

        {/* Right Sidebar - Settings */}
        <motion.div
          initial={false}
          animate={{ width: 320 }}
          className="bg-background/95 backdrop-blur-sm border-l border-border z-10 overflow-hidden"
        >
          <div className="p-4 border-b border-border">
            <h2 className="font-semibold text-lg flex items-center gap-2">
              <Settings className="h-5 w-5" />
              Settings
            </h2>
          </div>
          
          <ScrollArea className="h-[calc(100vh-80px)]">
            <div className="p-4 space-y-6">
              {/* Model Selection */}
              <div className="space-y-2">
                <Label>Model</Label>
                <Select value={selectedModel} onValueChange={setSelectedModel}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="gemini-1.5-pro">Gemini 1.5 Pro</SelectItem>
                    <SelectItem value="gemini-1.5-flash">Gemini 1.5 Flash</SelectItem>
                    <SelectItem value="gemini-1.0-pro">Gemini 1.0 Pro</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Voice Selection */}
              <div className="space-y-2">
                <Label>Voice</Label>
                <Select value={selectedVoice} onValueChange={setSelectedVoice}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="alloy">Alloy</SelectItem>
                    <SelectItem value="echo">Echo</SelectItem>
                    <SelectItem value="fable">Fable</SelectItem>
                    <SelectItem value="onyx">Onyx</SelectItem>
                    <SelectItem value="nova">Nova</SelectItem>
                    <SelectItem value="shimmer">Shimmer</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Temperature */}
              <div className="space-y-2">
                <Label>Temperature: {temperature[0]}</Label>
                <EnhancedSlider
                  value={temperature}
                  onValueChange={setTemperature}
                  max={2}
                  min={0}
                  step={0.1}
                  className="w-full"
                />
              </div>

              <Separator />

              {/* Features */}
              <div className="space-y-4">
                <Label className="text-base font-semibold">Features</Label>
                
                <div className="flex items-center justify-between">
                  <Label htmlFor="function-calling">Function Calling</Label>
                  <Switch
                    id="function-calling"
                    checked={functionCalling}
                    onCheckedChange={setFunctionCalling}
                  />
                </div>
                
                <div className="flex items-center justify-between">
                  <Label htmlFor="web-search">Web Search</Label>
                  <Switch
                    id="web-search"
                    checked={webSearch}
                    onCheckedChange={setWebSearch}
                  />
                </div>
                
                <div className="flex items-center justify-between">
                  <Label htmlFor="rag">RAG</Label>
                  <Switch
                    id="rag"
                    checked={rag}
                    onCheckedChange={setRag}
                  />
                </div>
              </div>

              <Separator />

              {/* Themes */}
              <div className="space-y-3">
                <Label className="text-base font-semibold flex items-center gap-2">
                  <Palette className="h-4 w-4" />
                  Themes
                </Label>
                
                {Object.entries(themes).map(([key, theme]) => (
                  <Button
                    key={key}
                    variant={currentTheme === key ? "default" : "outline"}
                    className={cn(
                      "w-full justify-start gap-2",
                      currentTheme === key && `bg-gradient-to-r ${theme.gradient} text-white`
                    )}
                    onClick={() => setCurrentTheme(key)}
                  >
                    {key === "purple-haze" && <Sparkles className="h-4 w-4" />}
                    {key === "midnight-sky" && <Moon className="h-4 w-4" />}
                    {key === "daytime-clouds" && <Cloud className="h-4 w-4" />}
                    {theme.name}
                  </Button>
                ))}
              </div>

              <Separator />

              {/* Status Indicators */}
              <div className="space-y-3">
                <Label className="text-base font-semibold">Status</Label>
                
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Recording</span>
                    <Badge variant={isRecording ? "default" : "secondary"}>
                      {isRecording ? "Active" : "Inactive"}
                    </Badge>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Video</span>
                    <Badge variant={isVideoOn ? "default" : "secondary"}>
                      {isVideoOn ? "On" : "Off"}
                    </Badge>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Screen Share</span>
                    <Badge variant={isScreenSharing ? "default" : "secondary"}>
                      {isScreenSharing ? "Active" : "Inactive"}
                    </Badge>
                  </div>
                </div>
              </div>
            </div>
          </ScrollArea>
        </motion.div>

        {/* Live Chat Bubbles */}
        <LiveChatBubble message={liveChatMessage} isVisible={liveChatVisible} />
      </div>
    </TooltipProvider>
  );
};

export default GeminiLiveAPIStudio;
