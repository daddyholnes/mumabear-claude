"use client";

import * as React from "react";
import { useState, useRef, useCallback, useEffect, useTransition } from "react";
import { motion, AnimatePresence, Transition, Variants, Variant, MotionConfig } from "framer-motion";
import { cn } from "@/lib/utils";
import {
  Mic, MicOff, Video, VideoOff, Monitor, Share2, Upload, Image as ImageIcon,
  Paperclip, Smile, Send, Settings, ChevronRight, ChevronDown, Copy,
  MessageSquare, History, Palette, Sun, Moon, Sparkles, Loader2,
  FileText, Camera, Volume2, VolumeX, Phone, PhoneOff, MoreVertical,
  Trash2, Download, Edit3, Search, Filter, SortAsc, Grid, List,
  Zap, Bot, User, Clock, Star, Heart, ThumbsUp, RotateCcw,
  X, Plus, Minus, Play, Pause, Square, SkipForward, SkipBack,
  Maximize, Minimize, RotateCw, RefreshCw, AlertCircle, CheckCircle,
  Info, HelpCircle, ExternalLink, Link, Eye, EyeOff, Lock, Unlock,
  Shield, Key, Database, Cloud, Wifi, WifiOff, Bluetooth, Battery,
  Signal, Smartphone, Tablet, Laptop, Desktop, Headphones, Speaker,
  Printer, Scanner, Keyboard, Mouse, Gamepad2, Joystick, Camera as CameraIcon,
  Webcam, Microphone, Speaker as SpeakerIcon, Volume1, Volume, VolumeX as VolumeXIcon,
  Bell, BellOff, Notification, Mail, MailOpen, Inbox, Outbox, Send as SendIcon,
  Reply, ReplyAll, Forward, Archive, Trash, Spam, Flag, Bookmark,
  BookmarkCheck, Tag, Tags, Label, Folder, FolderOpen, File, FileText as FileTextIcon,
  FileImage, FileVideo, FileAudio, FilePdf, FileSpreadsheet, FileCode,
  FileArchive, FileX, FilePlus, FileMinus, FileEdit, FileCopy, FileMove,
  FileSearch, FileCheck, FileWarning, FileQuestion, FileInfo, FileDownload,
  FileUpload, FileImport, FileExport, FileSave, FilePrint, FileShare,
  FileSync, FileBackup, FileRestore, FileRecovery, FileSecure, FileLock,
  FileUnlock, FileShield, FileKey, FileDatabase, FileCloud, FileWifi,
  FileBluetooth, FileBattery, FileSignal, FileSmartphone, FileTablet,
  FileLaptop, FileDesktop, FileHeadphones, FileSpeaker, FilePrinter,
  FileScanner, FileKeyboard, FileMouse, FileGamepad, FileJoystick,
  FileCamera, FileWebcam, FileMicrophone
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";

// Gradient Button Component
const gradientButtonVariants = {
  default: "gradient-button inline-flex items-center justify-center rounded-[11px] min-w-[132px] px-9 py-4 text-base leading-[19px] font-[500] text-white font-sans font-bold focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  variant: "gradient-button gradient-button-variant inline-flex items-center justify-center rounded-[11px] min-w-[132px] px-9 py-4 text-base leading-[19px] font-[500] text-white font-sans font-bold focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
};

const GradientButton = React.forwardRef<HTMLButtonElement, React.ButtonHTMLAttributes<HTMLButtonElement> & { variant?: "default" | "variant" }>(
  ({ className, variant = "default", ...props }, ref) => {
    return (
      <button
        className={cn(gradientButtonVariants[variant], className)}
        ref={ref}
        {...props}
      />
    );
  }
);
GradientButton.displayName = "GradientButton";

// Collapsible Component
type AccordionContextType = {
  expandedValue: React.Key | null;
  toggleItem: (value: React.Key) => void;
  variants?: { expanded: Variant; collapsed: Variant };
};

const AccordionContext = React.createContext<AccordionContextType | undefined>(undefined);

function useAccordion() {
  const context = React.useContext(AccordionContext);
  if (!context) {
    throw new Error('useAccordion must be used within an AccordionProvider');
  }
  return context;
}

type AccordionProviderProps = {
  children: React.ReactNode;
  variants?: { expanded: Variant; collapsed: Variant };
  expandedValue?: React.Key | null;
  onValueChange?: (value: React.Key | null) => void;
};

function AccordionProvider({
  children,
  variants,
  expandedValue: externalExpandedValue,
  onValueChange,
}: AccordionProviderProps) {
  const [internalExpandedValue, setInternalExpandedValue] = useState<React.Key | null>(null);

  const expandedValue = externalExpandedValue !== undefined ? externalExpandedValue : internalExpandedValue;

  const toggleItem = (value: React.Key) => {
    const newValue = expandedValue === value ? null : value;
    if (onValueChange) {
      onValueChange(newValue);
    } else {
      setInternalExpandedValue(newValue);
    }
  };

  return (
    <AccordionContext.Provider value={{ expandedValue, toggleItem, variants }}>
      {children}
    </AccordionContext.Provider>
  );
}

type AccordionProps = {
  children: React.ReactNode;
  className?: string;
  transition?: Transition;
  variants?: { expanded: Variant; collapsed: Variant };
  expandedValue?: React.Key | null;
  onValueChange?: (value: React.Key | null) => void;
};

function Accordion({
  children,
  className,
  transition,
  variants,
  expandedValue,
  onValueChange,
}: AccordionProps) {
  return (
    <MotionConfig transition={transition}>
      <div className={cn('relative', className)} aria-orientation='vertical'>
        <AccordionProvider
          variants={variants}
          expandedValue={expandedValue}
          onValueChange={onValueChange}
        >
          {children}
        </AccordionProvider>
      </div>
    </MotionConfig>
  );
}

type AccordionItemProps = {
  value: React.Key;
  children: React.ReactNode;
  className?: string;
};

function AccordionItem({ value, children, className }: AccordionItemProps) {
  const { expandedValue } = useAccordion();
  const isExpanded = value === expandedValue;

  return (
    <div
      className={cn('overflow-hidden', className)}
      {...(isExpanded ? { 'data-expanded': '' } : {})}
    >
      {React.Children.map(children, (child) => {
        if (React.isValidElement(child)) {
          return React.cloneElement(child, {
            ...child.props,
            value,
            expanded: isExpanded,
          });
        }
        return child;
      })}
    </div>
  );
}

type AccordionTriggerProps = {
  children: React.ReactNode;
  className?: string;
};

function AccordionTrigger({
  children,
  className,
  ...props
}: AccordionTriggerProps) {
  const { toggleItem, expandedValue } = useAccordion();
  const value = (props as { value?: React.Key }).value;
  const isExpanded = value === expandedValue;

  return (
    <button
      onClick={() => value !== undefined && toggleItem(value)}
      aria-expanded={isExpanded}
      type='button'
      className={cn('group', className)}
      {...(isExpanded ? { 'data-expanded': '' } : {})}
    >
      {children}
    </button>
  );
}

type AccordionContentProps = {
  children: React.ReactNode;
  className?: string;
};

function AccordionContent({
  children,
  className,
  ...props
}: AccordionContentProps) {
  const { expandedValue, variants } = useAccordion();
  const value = (props as { value?: React.Key }).value;
  const isExpanded = value === expandedValue;

  const BASE_VARIANTS: Variants = {
    expanded: { height: 'auto', opacity: 1 },
    collapsed: { height: 0, opacity: 0 },
  };

  const combinedVariants = {
    expanded: { ...BASE_VARIANTS.expanded, ...variants?.expanded },
    collapsed: { ...BASE_VARIANTS.collapsed, ...variants?.collapsed },
  };

  return (
    <AnimatePresence initial={false}>
      {isExpanded && (
        <motion.div
          initial='collapsed'
          animate='expanded'
          exit='collapsed'
          variants={combinedVariants}
          className={className}
        >
          {children}
        </motion.div>
      )}
    </AnimatePresence>
  );
}

// Noise Component for Gradient Backgrounds
function Noise({
  patternSize = 100,
  patternScaleX = 1,
  patternScaleY = 1,
  patternRefreshInterval = 1,
  patternAlpha = 50,
  intensity = 1,
}) {
  const grainRef = useRef<HTMLCanvasElement>(null);
  const canvasCssSizeRef = useRef({ width: 0, height: 0 });

  useEffect(() => {
    const canvas = grainRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    let frame = 0;
    const patternCanvas = document.createElement('canvas');
    patternCanvas.width = patternSize;
    patternCanvas.height = patternSize;

    const patternCtx = patternCanvas.getContext('2d');
    if (!patternCtx) return;
    
    const patternData = patternCtx.createImageData(patternSize, patternSize);
    const patternPixelDataLength = patternSize * patternSize * 4;

    const resize = () => {
      const dpr = window.devicePixelRatio || 1;
      let newCssWidth = window.innerWidth;
      let newCssHeight = window.innerHeight;

      if (canvas.parentElement) {
        const parentRect = canvas.parentElement.getBoundingClientRect();
        newCssWidth = parentRect.width;
        newCssHeight = parentRect.height;
      }
      
      canvasCssSizeRef.current = { width: newCssWidth, height: newCssHeight };

      canvas.width = newCssWidth * dpr;
      canvas.height = newCssHeight * dpr;
      
      ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
    };

    const updatePattern = () => {
      for (let i = 0; i < patternPixelDataLength; i += 4) {
        const value = Math.random() * 255 * intensity;
        patternData.data[i] = value;
        patternData.data[i + 1] = value;
        patternData.data[i + 2] = value;
        patternData.data[i + 3] = patternAlpha;
      }
      patternCtx.putImageData(patternData, 0, 0);
    };

    const drawGrain = () => {
      const { width: cssWidth, height: cssHeight } = canvasCssSizeRef.current;
      if (cssWidth === 0 || cssHeight === 0) return;

      ctx.clearRect(0, 0, cssWidth, cssHeight);
      ctx.save();
      
      const safePatternScaleX = Math.max(0.001, patternScaleX);
      const safePatternScaleY = Math.max(0.001, patternScaleY);
      ctx.scale(safePatternScaleX, safePatternScaleY);

      const fillPattern = ctx.createPattern(patternCanvas, 'repeat');
      if (fillPattern) {
        ctx.fillStyle = fillPattern;
        ctx.fillRect(0, 0, cssWidth / safePatternScaleX, cssHeight / safePatternScaleY);
      }
      
      ctx.restore();
    };

    let animationFrameId: number;
    const loop = () => {
      if (canvasCssSizeRef.current.width > 0 && canvasCssSizeRef.current.height > 0) {
        if (frame % patternRefreshInterval === 0) {
          updatePattern();
          drawGrain();
        }
      }
      frame++;
      animationFrameId = window.requestAnimationFrame(loop);
    };

    window.addEventListener('resize', resize);
    resize();
    if (patternRefreshInterval > 0) {
      loop();
    } else {
      updatePattern();
      drawGrain();
    }

    return () => {
      window.removeEventListener('resize', resize);
      if (animationFrameId) {
        window.cancelAnimationFrame(animationFrameId);
      }
    };
  }, [patternSize, patternScaleX, patternScaleY, patternRefreshInterval, patternAlpha, intensity]);

  return <canvas className="absolute inset-0 w-full h-full pointer-events-none" ref={grainRef} />;
}

// Gradient Background Component
function GradientBackground({
  gradientType = 'radial-gradient',
  gradientSize = '125% 125%',
  gradientOrigin = 'bottom-middle',
  colors = [
    { color: 'rgba(139,69,19,0.8)', stop: '0%' },
    { color: 'rgba(75,0,130,0.9)', stop: '25%' },
    { color: 'rgba(138,43,226,0.8)', stop: '50%' },
    { color: 'rgba(72,61,139,0.7)', stop: '75%' },
    { color: 'rgba(25,25,112,0.6)', stop: '100%' }
  ],
  enableNoise = true,
  noisePatternSize = 100,
  noisePatternScaleX = 1,
  noisePatternScaleY = 1,
  noisePatternRefreshInterval = 1,
  noisePatternAlpha = 30,
  noiseIntensity = 0.8,
  className = '',
  style = {},
  children,
  customGradient = null
}: {
  gradientType?: string;
  gradientSize?: string;
  gradientOrigin?: string;
  colors?: Array<{ color: string; stop: string }>;
  enableNoise?: boolean;
  noisePatternSize?: number;
  noisePatternScaleX?: number;
  noisePatternScaleY?: number;
  noisePatternRefreshInterval?: number;
  noisePatternAlpha?: number;
  noiseIntensity?: number;
  className?: string;
  style?: React.CSSProperties;
  children?: React.ReactNode;
  customGradient?: string | null;
}) {
  const generateGradient = () => {
    if (customGradient) return customGradient;
    
    const getGradientPosition = (origin: string) => {
      const positions: Record<string, string> = {
        'bottom-middle': '50% 101%',
        'bottom-left': '0% 101%',
        'bottom-right': '100% 101%',
        'top-middle': '50% -1%',
        'top-left': '0% -1%',
        'top-right': '100% -1%',
        'left-middle': '-1% 50%',
        'right-middle': '101% 50%',
        'center': '50% 50%'
      };
      return positions[origin] || positions['bottom-middle'];
    };
    
    const position = getGradientPosition(gradientOrigin);
    const colorStops = colors.map(({ color, stop }) => `${color} ${stop}`).join(',');
    
    if (gradientType === 'radial-gradient') {
      return `radial-gradient(${gradientSize} at ${position},${colorStops})`;
    }
    
    return `${gradientType}(${colorStops})`;
  };

  const gradientStyle = {
    background: generateGradient(),
    ...style
  };

  return (
    <div 
      className={`absolute inset-0 w-full h-full ${className}`}
      style={gradientStyle}
    >
      {enableNoise && (
        <Noise
          patternSize={noisePatternSize}
          patternScaleX={noisePatternScaleX}
          patternScaleY={noisePatternScaleY}
          patternRefreshInterval={noisePatternRefreshInterval}
          patternAlpha={noisePatternAlpha}
          intensity={noiseIntensity}
        />
      )}
      {children}
    </div>
  );
}

// File Upload Component
interface FileWithPreview {
  id: string;
  preview: string;
  progress: number;
  name: string;
  size: number;
  type: string;
  file?: File;
}

function FileUpload({ onFilesUploaded }: { onFilesUploaded?: (files: FileWithPreview[]) => void }) {
  const [files, setFiles] = useState<FileWithPreview[]>([]);
  const [isDragging, setIsDragging] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);

  const handleFiles = (fileList: FileList) => {
    const newFiles = Array.from(fileList).map((file) => ({
      id: `${URL.createObjectURL(file)}-${Date.now()}`,
      preview: URL.createObjectURL(file),
      progress: 0,
      name: file.name,
      size: file.size,
      type: file.type,
      file,
    }));
    setFiles((prev) => [...prev, ...newFiles]);
    onFilesUploaded?.(newFiles);
    newFiles.forEach((f) => simulateUpload(f.id));
  };

  const simulateUpload = (id: string) => {
    let progress = 0;
    const interval = setInterval(() => {
      progress += Math.random() * 15;
      setFiles((prev) =>
        prev.map((f) =>
          f.id === id ? { ...f, progress: Math.min(progress, 100) } : f,
        ),
      );
      if (progress >= 100) {
        clearInterval(interval);
      }
    }, 300);
  };

  const onDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    handleFiles(e.dataTransfer.files);
  };

  const onDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const onDragLeave = () => setIsDragging(false);

  const onSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) handleFiles(e.target.files);
  };

  const formatFileSize = (bytes: number): string => {
    if (!bytes) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return `${(bytes / Math.pow(k, i)).toFixed(2)} ${sizes[i]}`;
  };

  return (
    <div className="w-full max-w-md">
      <motion.div
        onDragOver={onDragOver}
        onDragLeave={onDragLeave}
        onDrop={onDrop}
        onClick={() => inputRef.current?.click()}
        initial={false}
        animate={{
          borderColor: isDragging ? "#3b82f6" : "#ffffff10",
          scale: isDragging ? 1.02 : 1,
        }}
        whileHover={{ scale: 1.01 }}
        transition={{ duration: 0.2 }}
        className={cn(
          "relative rounded-xl p-6 text-center cursor-pointer bg-white/5 border border-white/10 backdrop-blur-sm",
          isDragging && "ring-2 ring-blue-400/30 border-blue-500",
        )}
      >
        <div className="flex flex-col items-center gap-3">
          <Upload className="w-8 h-8 text-white/60" />
          <div className="space-y-1">
            <p className="text-sm text-white/80">
              {isDragging ? "Drop files here" : "Upload files"}
            </p>
            <p className="text-xs text-white/40">
              Drag & drop or click to browse
            </p>
          </div>
          <input
            ref={inputRef}
            type="file"
            multiple
            hidden
            onChange={onSelect}
            accept="image/*,application/pdf,video/*,audio/*,text/*"
          />
        </div>
      </motion.div>

      {files.length > 0 && (
        <div className="mt-4 space-y-2">
          <AnimatePresence>
            {files.map((file) => (
              <motion.div
                key={file.id}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="flex items-center gap-3 p-3 rounded-lg bg-white/5 backdrop-blur-sm"
              >
                <FileText className="w-4 h-4 text-blue-400" />
                <div className="flex-1 min-w-0">
                  <p className="text-sm text-white/90 truncate">{file.name}</p>
                  <p className="text-xs text-white/40">{formatFileSize(file.size)}</p>
                  <div className="w-full h-1 bg-white/10 rounded-full mt-1">
                    <motion.div
                      initial={{ width: 0 }}
                      animate={{ width: `${file.progress}%` }}
                      className="h-full bg-blue-500 rounded-full"
                    />
                  </div>
                </div>
                {file.progress === 100 && (
                  <CheckCircle className="w-4 h-4 text-green-400" />
                )}
              </motion.div>
            ))}
          </AnimatePresence>
        </div>
      )}
    </div>
  );
}

// Emoji Picker Component
function EmojiPicker({ onEmojiSelect }: { onEmojiSelect?: (emoji: string) => void }) {
  const emojis = ['😀', '😃', '😄', '😁', '😆', '😅', '😂', '🤣', '😊', '😇', '🙂', '🙃', '😉', '😌', '😍', '🥰', '😘', '😗', '😙', '😚', '😋', '😛', '😝', '😜', '🤪', '🤨', '🧐', '🤓', '😎', '🤩', '🥳', '😏', '😒', '😞', '😔', '😟', '😕', '🙁', '☹️', '😣', '😖', '😫', '😩', '🥺', '😢', '😭', '😤', '😠', '😡', '🤬', '🤯', '😳', '🥵', '🥶', '😱', '😨', '😰', '😥', '😓', '🤗', '🤔', '🤭', '🤫', '🤥', '😶', '😐', '😑', '😬', '🙄', '😯', '😦', '😧', '😮', '😲', '🥱', '😴', '🤤', '😪', '😵', '🤐', '🥴', '🤢', '🤮', '🤧', '😷', '🤒', '🤕'];

  return (
    <div className="grid grid-cols-8 gap-1 p-2 bg-white/5 rounded-lg backdrop-blur-sm max-h-32 overflow-y-auto">
      {emojis.map((emoji, index) => (
        <button
          key={index}
          onClick={() => onEmojiSelect?.(emoji)}
          className="p-1 hover:bg-white/10 rounded text-lg transition-colors"
        >
          {emoji}
        </button>
      ))}
    </div>
  );
}

// Chat Bubble Component
function ChatBubble({ 
  message, 
  isUser, 
  isTyping = false, 
  timestamp 
}: { 
  message: string; 
  isUser: boolean; 
  isTyping?: boolean;
  timestamp?: string;
}) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20, scale: 0.95 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      exit={{ opacity: 0, y: -20, scale: 0.95 }}
      className={cn(
        "flex gap-3 mb-4",
        isUser ? "justify-end" : "justify-start"
      )}
    >
      {!isUser && (
        <Avatar className="w-8 h-8">
          <AvatarFallback className="bg-purple-500/20 text-purple-300">
            <Bot className="w-4 h-4" />
          </AvatarFallback>
        </Avatar>
      )}
      
      <div className={cn(
        "max-w-[70%] rounded-2xl px-4 py-3 backdrop-blur-sm",
        isUser 
          ? "bg-purple-500/20 text-white ml-auto" 
          : "bg-white/10 text-white/90"
      )}>
        {isTyping ? (
          <div className="flex items-center gap-1">
            <span className="text-sm">Thinking</span>
            <div className="flex gap-1">
              {[1, 2, 3].map((dot) => (
                <motion.div
                  key={dot}
                  className="w-1 h-1 bg-white/60 rounded-full"
                  animate={{
                    opacity: [0.3, 1, 0.3],
                    scale: [0.8, 1.2, 0.8]
                  }}
                  transition={{
                    duration: 1.2,
                    repeat: Infinity,
                    delay: dot * 0.15,
                  }}
                />
              ))}
            </div>
          </div>
        ) : (
          <p className="text-sm">{message}</p>
        )}
        
        {timestamp && !isTyping && (
          <p className="text-xs text-white/40 mt-1">{timestamp}</p>
        )}
      </div>
      
      {isUser && (
        <Avatar className="w-8 h-8">
          <AvatarFallback className="bg-blue-500/20 text-blue-300">
            <User className="w-4 h-4" />
          </AvatarFallback>
        </Avatar>
      )}
    </motion.div>
  );
}

// Live Chat Bubble Component
function LiveChatBubble({ text, isUser }: { text: string; isUser: boolean }) {
  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.8, y: 20 }}
      animate={{ opacity: 1, scale: 1, y: 0 }}
      exit={{ opacity: 0, scale: 0.8, y: -20 }}
      className={cn(
        "fixed bottom-20 px-4 py-2 rounded-full backdrop-blur-sm text-sm max-w-xs",
        isUser 
          ? "right-4 bg-purple-500/30 text-white" 
          : "left-4 bg-white/20 text-white/90"
      )}
    >
      {text}
    </motion.div>
  );
}

// Main Gemini Live API Studio Component
function GeminiLiveAPIStudio() {
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [selectedModel, setSelectedModel] = useState("gemini-2.0-flash-exp");
  const [selectedVoice, setSelectedVoice] = useState("Aoede");
  const [temperature, setTemperature] = useState([0.7]);
  const [enableComments, setEnableComments] = useState(false);
  const [enableWebSearch, setEnableWebSearch] = useState(false);
  const [enableRAG, setEnableRAG] = useState(false);
  const [currentTheme, setCurrentTheme] = useState("purple-haze");
  const [inputValue, setInputValue] = useState("");
  const [isRecording, setIsRecording] = useState(false);
  const [isVideoOn, setIsVideoOn] = useState(false);
  const [isScreenSharing, setIsScreenSharing] = useState(false);
  const [isLiveMode, setIsLiveMode] = useState(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [messages, setMessages] = useState([
    { id: 1, text: "Hello! I'm Gemini. How can I help you today?", isUser: false, timestamp: "10:30 AM" }
  ]);
  const [isTyping, setIsTyping] = useState(false);
  const [liveBubbles, setLiveBubbles] = useState<Array<{ id: number; text: string; isUser: boolean }>>([]);
  const [chatHistory] = useState([
    { id: 1, title: "UI Design Discussion", timestamp: "2 hours ago" },
    { id: 2, title: "Code Review Session", timestamp: "1 day ago" },
    { id: 3, title: "Project Planning", timestamp: "2 days ago" },
    { id: 4, title: "API Integration", timestamp: "3 days ago" },
    { id: 5, title: "Database Schema", timestamp: "1 week ago" }
  ]);

  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const [isPending, startTransition] = useTransition();

  const themes = {
    "purple-haze": {
      name: "Purple Haze",
      colors: [
        { color: 'rgba(139,69,19,0.8)', stop: '0%' },
        { color: 'rgba(75,0,130,0.9)', stop: '25%' },
        { color: 'rgba(138,43,226,0.8)', stop: '50%' },
        { color: 'rgba(72,61,139,0.7)', stop: '75%' },
        { color: 'rgba(25,25,112,0.6)', stop: '100%' }
      ]
    },
    "midnight-sparkles": {
      name: "Midnight Sky Sparkles",
      colors: [
        { color: 'rgba(0,0,0,1)', stop: '0%' },
        { color: 'rgba(25,25,112,0.8)', stop: '25%' },
        { color: 'rgba(72,61,139,0.6)', stop: '50%' },
        { color: 'rgba(138,43,226,0.4)', stop: '75%' },
        { color: 'rgba(255,255,255,0.1)', stop: '100%' }
      ]
    },
    "daytime-clouds": {
      name: "Daytime Clouds",
      colors: [
        { color: 'rgba(135,206,235,0.8)', stop: '0%' },
        { color: 'rgba(255,255,255,0.6)', stop: '25%' },
        { color: 'rgba(176,196,222,0.7)', stop: '50%' },
        { color: 'rgba(230,230,250,0.5)', stop: '75%' },
        { color: 'rgba(255,250,250,0.3)', stop: '100%' }
      ]
    }
  };

  const adjustHeight = useCallback(() => {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    textarea.style.height = 'auto';
    textarea.style.height = `${Math.min(textarea.scrollHeight, 120)}px`;
  }, []);

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;
    
    const newMessage = {
      id: Date.now(),
      text: inputValue,
      isUser: true,
      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
    };
    
    setMessages(prev => [...prev, newMessage]);
    setInputValue("");
    
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
    }
    
    // Simulate AI response
    setIsTyping(true);
    setTimeout(() => {
      setIsTyping(false);
      const aiResponse = {
        id: Date.now() + 1,
        text: "I understand your request. Let me help you with that. This is a simulated response from Gemini.",
        isUser: false,
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
      };
      setMessages(prev => [...prev, aiResponse]);
    }, 2000);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const toggleLiveMode = () => {
    setIsLiveMode(!isLiveMode);
    if (!isLiveMode) {
      // Simulate live bubbles
      const bubbleTexts = ["Hello", "How are you?", "This is live mode", "Real-time chat"];
      bubbleTexts.forEach((text, index) => {
        setTimeout(() => {
          const bubble = { id: Date.now() + index, text, isUser: index % 2 === 0 };
          setLiveBubbles(prev => [...prev, bubble]);
          setTimeout(() => {
            setLiveBubbles(prev => prev.filter(b => b.id !== bubble.id));
          }, 3000);
        }, index * 1000);
      });
    }
  };

  const handleEmojiSelect = (emoji: string) => {
    setInputValue(prev => prev + emoji);
    setShowEmojiPicker(false);
  };

  const handleImagePaste = (e: React.ClipboardEvent) => {
    const items = e.clipboardData.items;
    for (let i = 0; i < items.length; i++) {
      if (items[i].type.indexOf('image') !== -1) {
        const blob = items[i].getAsFile();
        if (blob) {
          console.log('Image pasted:', blob);
          // Handle image upload
        }
      }
    }
  };

  return (
    <div className="h-screen w-full flex overflow-hidden relative">
      {/* Background */}
      <GradientBackground
        {...themes[currentTheme as keyof typeof themes]}
        className="fixed inset-0 z-0"
      />
      
      {/* Main Content */}
      <div className="flex w-full relative z-10">
        {/* Left Sidebar - Chat History */}
        <motion.div
          initial={false}
          animate={{ width: sidebarOpen ? 280 : 0 }}
          className="bg-black/20 backdrop-blur-xl border-r border-white/10 overflow-hidden"
        >
          <div className="p-4 border-b border-white/10">
            <h2 className="text-white font-semibold mb-4">Chat History</h2>
            <ScrollArea className="h-[calc(100vh-200px)]">
              <div className="space-y-2">
                {chatHistory.map((chat) => (
                  <motion.div
                    key={chat.id}
                    whileHover={{ scale: 1.02 }}
                    className="p-3 rounded-lg bg-white/5 hover:bg-white/10 cursor-pointer transition-colors"
                  >
                    <p className="text-white/90 text-sm font-medium truncate">{chat.title}</p>
                    <p className="text-white/40 text-xs">{chat.timestamp}</p>
                  </motion.div>
                ))}
              </div>
            </ScrollArea>
          </div>
        </motion.div>

        {/* Main Chat Area */}
        <div className="flex-1 flex flex-col">
          {/* Header */}
          <div className="p-4 border-b border-white/10 bg-black/10 backdrop-blur-xl">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setSidebarOpen(!sidebarOpen)}
                  className="text-white/70 hover:text-white hover:bg-white/10"
                >
                  {sidebarOpen ? <ChevronRight className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
                </Button>
                <h1 className="text-white font-semibold">Gemini Live API Studio</h1>
              </div>
              
              <div className="flex items-center gap-2">
                {/* Media Controls */}
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setIsRecording(!isRecording)}
                        className={cn(
                          "text-white/70 hover:text-white hover:bg-white/10",
                          isRecording && "bg-red-500/20 text-red-300"
                        )}
                      >
                        {isRecording ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      {isRecording ? "Stop Recording" : "Start Recording"}
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>

                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setIsVideoOn(!isVideoOn)}
                        className={cn(
                          "text-white/70 hover:text-white hover:bg-white/10",
                          isVideoOn && "bg-blue-500/20 text-blue-300"
                        )}
                      >
                        {isVideoOn ? <VideoOff className="w-4 h-4" /> : <Video className="w-4 h-4" />}
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      {isVideoOn ? "Turn Off Video" : "Turn On Video"}
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>

                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setIsScreenSharing(!isScreenSharing)}
                        className={cn(
                          "text-white/70 hover:text-white hover:bg-white/10",
                          isScreenSharing && "bg-green-500/20 text-green-300"
                        )}
                      >
                        <Monitor className="w-4 h-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      {isScreenSharing ? "Stop Screen Share" : "Share Screen"}
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>

                <GradientButton
                  onClick={toggleLiveMode}
                  variant={isLiveMode ? "variant" : "default"}
                  className="text-sm px-4 py-2"
                >
                  {isLiveMode ? "Exit Live" : "Go Live"}
                </GradientButton>
              </div>
            </div>
          </div>

          {/* Chat Messages */}
          <ScrollArea className="flex-1 p-6">
            <div className="max-w-4xl mx-auto">
              <AnimatePresence>
                {messages.map((message) => (
                  <ChatBubble
                    key={message.id}
                    message={message.text}
                    isUser={message.isUser}
                    timestamp={message.timestamp}
                  />
                ))}
                {isTyping && (
                  <ChatBubble
                    message=""
                    isUser={false}
                    isTyping={true}
                  />
                )}
              </AnimatePresence>
            </div>
          </ScrollArea>

          {/* Input Area */}
          <div className="p-6 border-t border-white/10 bg-black/10 backdrop-blur-xl">
            <div className="max-w-4xl mx-auto">
              <div className="relative">
                <div className="flex items-end gap-3 p-4 rounded-2xl bg-white/5 backdrop-blur-sm border border-white/10">
                  <div className="flex-1">
                    <Textarea
                      ref={textareaRef}
                      value={inputValue}
                      onChange={(e) => {
                        setInputValue(e.target.value);
                        adjustHeight();
                      }}
                      onKeyDown={handleKeyDown}
                      onPaste={handleImagePaste}
                      placeholder="Type your message..."
                      className="bg-transparent border-none text-white placeholder:text-white/40 resize-none min-h-[40px] max-h-[120px]"
                      rows={1}
                    />
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="text-white/70 hover:text-white hover:bg-white/10"
                          >
                            <Paperclip className="w-4 h-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>Attach File</TooltipContent>
                      </Tooltip>
                    </TooltipProvider>

                    <Popover open={showEmojiPicker} onOpenChange={setShowEmojiPicker}>
                      <PopoverTrigger asChild>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="text-white/70 hover:text-white hover:bg-white/10"
                        >
                          <Smile className="w-4 h-4" />
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-80 p-0 bg-black/90 border-white/20">
                        <EmojiPicker onEmojiSelect={handleEmojiSelect} />
                      </PopoverContent>
                    </Popover>

                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="text-white/70 hover:text-white hover:bg-white/10"
                          >
                            <ImageIcon className="w-4 h-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>Upload Image</TooltipContent>
                      </Tooltip>
                    </TooltipProvider>

                    <GradientButton
                      onClick={handleSendMessage}
                      disabled={!inputValue.trim() || isPending}
                      className="px-4 py-2"
                    >
                      {isPending ? <Loader2 className="w-4 h-4 animate-spin" /> : <Send className="w-4 h-4" />}
                    </GradientButton>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Right Sidebar - Settings */}
        <div className="w-80 bg-black/20 backdrop-blur-xl border-l border-white/10 p-6 overflow-y-auto">
          <div className="space-y-6">
            <div>
              <h3 className="text-white font-semibold mb-4">Model Settings</h3>
              
              <div className="space-y-4">
                <div>
                  <Label className="text-white/80 mb-2">Model</Label>
                  <Select value={selectedModel} onValueChange={setSelectedModel}>
                    <SelectTrigger className="bg-white/5 border-white/20 text-white">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="bg-black/90 border-white/20">
                      <SelectItem value="gemini-2.0-flash-exp">Gemini 2.0 Flash Experimental</SelectItem>
                      <SelectItem value="gemini-1.5-pro">Gemini 1.5 Pro</SelectItem>
                      <SelectItem value="gemini-1.5-flash">Gemini 1.5 Flash</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label className="text-white/80 mb-2">Voice</Label>
                  <Select value={selectedVoice} onValueChange={setSelectedVoice}>
                    <SelectTrigger className="bg-white/5 border-white/20 text-white">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="bg-black/90 border-white/20">
                      <SelectItem value="Aoede">Aoede</SelectItem>
                      <SelectItem value="Charon">Charon</SelectItem>
                      <SelectItem value="Fenrir">Fenrir</SelectItem>
                      <SelectItem value="Puck">Puck</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label className="text-white/80 mb-2">Temperature: {temperature[0]}</Label>
                  <Slider
                    value={temperature}
                    onValueChange={setTemperature}
                    max={2}
                    min={0}
                    step={0.1}
                    className="mt-2"
                  />
                </div>
              </div>
            </div>

            <Separator className="bg-white/10" />

            <div>
              <h3 className="text-white font-semibold mb-4">Features</h3>
              
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <Label className="text-white/80">Function Calling</Label>
                  <Switch checked={enableComments} onCheckedChange={setEnableComments} />
                </div>
                
                <div className="flex items-center justify-between">
                  <Label className="text-white/80">Web Search</Label>
                  <Switch checked={enableWebSearch} onCheckedChange={setEnableWebSearch} />
                </div>
                
                <div className="flex items-center justify-between">
                  <Label className="text-white/80">RAG</Label>
                  <Switch checked={enableRAG} onCheckedChange={setEnableRAG} />
                </div>
              </div>
            </div>

            <Separator className="bg-white/10" />

            <div>
              <h3 className="text-white font-semibold mb-4">File Upload</h3>
              <FileUpload />
            </div>

            <Separator className="bg-white/10" />

            <div>
              <h3 className="text-white font-semibold mb-4">Themes</h3>
              
              <div className="space-y-2">
                {Object.entries(themes).map(([key, theme]) => (
                  <Button
                    key={key}
                    variant={currentTheme === key ? "default" : "ghost"}
                    className={cn(
                      "w-full justify-start text-white/80 hover:text-white",
                      currentTheme === key && "bg-white/20"
                    )}
                    onClick={() => setCurrentTheme(key)}
                  >
                    <Palette className="w-4 h-4 mr-2" />
                    {theme.name}
                  </Button>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Live Chat Bubbles */}
      <AnimatePresence>
        {liveBubbles.map((bubble) => (
          <LiveChatBubble
            key={bubble.id}
            text={bubble.text}
            isUser={bubble.isUser}
          />
        ))}
      </AnimatePresence>
    </div>
  );
}

export default function Demo() {
  return <GeminiLiveAPIStudio />;
}
