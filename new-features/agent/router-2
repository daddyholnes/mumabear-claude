"use client";

import * as React from "react";
import { useState, useEffect, useRef } from "react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { 
  Activity, 
  AlertCircle, 
  BarChart3, 
  Brain, 
  CheckCircle, 
  ChevronDown, 
  ChevronRight, 
  Clock, 
  Code, 
  Cpu, 
  DollarSign, 
  Eye, 
  Filter, 
  Gauge, 
  GitBranch, 
  Heart, 
  Layers, 
  Play, 
  Pause, 
  RefreshCw, 
  Router, 
  Settings, 
  Shield, 
  Sparkles, 
  Target, 
  TrendingUp, 
  Zap 
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

// Types
interface TaskAnalysis {
  task_id: string;
  complexity_score: number;
  estimated_duration: number;
  resource_requirements: {
    memory: number;
    cpu: number;
    storage: number;
  };
  recommended_environment: 'e2b' | 'scrapybara';
  confidence_level: number;
  analysis_factors: string[];
  routing_reason: string;
}

interface ExecutionSession {
  session_id: string;
  task_description: string;
  environment: 'e2b' | 'scrapybara';
  status: 'queued' | 'running' | 'completed' | 'failed' | 'cancelled';
  start_time: string;
  end_time?: string;
  duration?: number;
  resource_usage: {
    memory: number;
    cpu: number;
    cost: number;
  };
  cost_estimate: number;
}

interface RouterMetrics {
  total_executions: number;
  success_rate: number;
  average_cost_per_execution: number;
  environment_distribution: {
    e2b_percentage: number;
    scrapybara_percentage: number;
  };
  cost_savings: number;
  routing_accuracy: number;
}

interface EnvironmentStatus {
  health: 'healthy' | 'warning' | 'error';
  capacity: number;
  response_time: number;
  error_rate: number;
  queue_length: number;
}

// Mama Bear Avatar Component
const MamaBearAvatar = ({ isThinking = false, size = 48 }: { isThinking?: boolean; size?: number }) => (
  <div className="relative">
    <div 
      className="rounded-full bg-gradient-to-br from-amber-100 to-amber-200 dark:from-amber-800 dark:to-amber-900 flex items-center justify-center border-2 border-amber-300 dark:border-amber-600"
      style={{ width: size, height: size }}
    >
      <span className="text-amber-800 dark:text-amber-200" style={{ fontSize: size * 0.6 }}>üêª</span>
    </div>
    {isThinking && (
      <motion.div
        className="absolute -top-1 -right-1 w-3 h-3 bg-blue-500 rounded-full"
        animate={{ scale: [1, 1.2, 1] }}
        transition={{ repeat: Infinity, duration: 1.5 }}
      />
    )}
  </div>
);

// Circle Progress Component
const CircleProgress = ({ value, maxValue, size = 40, strokeWidth = 3, className }: {
  value: number;
  maxValue: number;
  size?: number;
  strokeWidth?: number;
  className?: string;
}) => {
  const radius = (size - strokeWidth) / 2;
  const circumference = 2 * Math.PI * radius;
  const fillPercentage = Math.min(value / maxValue, 1);
  const strokeDashoffset = circumference * (1 - fillPercentage);

  const getColor = (percentage: number) => {
    if (percentage < 0.7) return "#10b981";
    if (percentage < 0.9) return "#f59e0b";
    return "#ef4444";
  };

  return (
    <div className={cn(className)}>
      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          className="fill-transparent stroke-gray-200 dark:stroke-gray-700"
          strokeWidth={strokeWidth}
        />
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          className="fill-transparent"
          stroke={getColor(fillPercentage)}
          strokeWidth={strokeWidth}
          strokeDasharray={circumference}
          strokeDashoffset={strokeDashoffset}
          transform={`rotate(-90 ${size / 2} ${size / 2})`}
          strokeLinecap="round"
        />
      </svg>
    </div>
  );
};

// Task Analysis Panel
const TaskAnalysisPanel = () => {
  const [task, setTask] = useState("Scrape product data from e-commerce site and analyze pricing trends");
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysis, setAnalysis] = useState<TaskAnalysis | null>(null);

  const handleAnalyze = () => {
    setIsAnalyzing(true);
    setTimeout(() => {
      setAnalysis({
        task_id: "task_" + Date.now(),
        complexity_score: 7.5,
        estimated_duration: 180,
        resource_requirements: {
          memory: 2048,
          cpu: 65,
          storage: 512
        },
        recommended_environment: 'scrapybara',
        confidence_level: 0.92,
        analysis_factors: ["Web scraping required", "Data processing", "Complex selectors"],
        routing_reason: "Task requires full browser environment and extended execution time"
      });
      setIsAnalyzing(false);
    }, 2000);
  };

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Brain className="w-5 h-5 text-purple-500" />
          Task Analysis
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <Label htmlFor="task-input">Task Description</Label>
          <Textarea
            id="task-input"
            value={task}
            onChange={(e) => setTask(e.target.value)}
            placeholder="Describe your task..."
            className="mt-1"
          />
        </div>

        <Button 
          onClick={handleAnalyze} 
          disabled={isAnalyzing || !task.trim()}
          className="w-full"
        >
          {isAnalyzing ? (
            <>
              <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
              Analyzing...
            </>
          ) : (
            <>
              <Sparkles className="w-4 h-4 mr-2" />
              Analyze Task
            </>
          )}
        </Button>

        {analysis && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="space-y-4 p-4 bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 rounded-lg border"
          >
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Complexity Score</span>
              <div className="flex items-center gap-2">
                <CircleProgress value={analysis.complexity_score} maxValue={10} size={32} />
                <span className="font-bold">{analysis.complexity_score}/10</span>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <span className="text-xs text-muted-foreground">Duration</span>
                <p className="font-medium">{analysis.estimated_duration}s</p>
              </div>
              <div>
                <span className="text-xs text-muted-foreground">Confidence</span>
                <p className="font-medium">{Math.round(analysis.confidence_level * 100)}%</p>
              </div>
            </div>

            <div>
              <span className="text-xs text-muted-foreground">Recommended Environment</span>
              <Badge 
                variant={analysis.recommended_environment === 'e2b' ? 'default' : 'secondary'}
                className="ml-2"
              >
                {analysis.recommended_environment.toUpperCase()}
              </Badge>
            </div>

            <div>
              <span className="text-xs text-muted-foreground">Routing Reason</span>
              <p className="text-sm mt-1">{analysis.routing_reason}</p>
            </div>

            <div className="flex gap-2">
              <Button size="sm" className="flex-1">
                <Play className="w-4 h-4 mr-1" />
                Execute
              </Button>
              <Button size="sm" variant="outline">
                <Settings className="w-4 h-4 mr-1" />
                Override
              </Button>
            </div>
          </motion.div>
        )}
      </CardContent>
    </Card>
  );
};

// Execution Session Monitor
const ExecutionSessionMonitor = () => {
  const [sessions] = useState<ExecutionSession[]>([
    {
      session_id: "sess_001",
      task_description: "Web scraping task",
      environment: "scrapybara",
      status: "running",
      start_time: new Date().toISOString(),
      resource_usage: { memory: 1024, cpu: 45, cost: 0.12 },
      cost_estimate: 0.25
    },
    {
      session_id: "sess_002", 
      task_description: "Data validation",
      environment: "e2b",
      status: "completed",
      start_time: new Date(Date.now() - 300000).toISOString(),
      end_time: new Date().toISOString(),
      duration: 120,
      resource_usage: { memory: 512, cpu: 25, cost: 0.05 },
      cost_estimate: 0.08
    }
  ]);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'running': return 'bg-blue-500';
      case 'completed': return 'bg-green-500';
      case 'failed': return 'bg-red-500';
      case 'queued': return 'bg-yellow-500';
      default: return 'bg-gray-500';
    }
  };

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Activity className="w-5 h-5 text-blue-500" />
          Active Sessions
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {sessions.map((session) => (
            <motion.div
              key={session.session_id}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="p-3 border rounded-lg hover:bg-accent/50 transition-colors"
            >
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <div className={cn("w-2 h-2 rounded-full", getStatusColor(session.status))} />
                  <span className="font-medium text-sm">{session.task_description}</span>
                </div>
                <Badge variant={session.environment === 'e2b' ? 'default' : 'secondary'}>
                  {session.environment.toUpperCase()}
                </Badge>
              </div>
              
              <div className="grid grid-cols-3 gap-2 text-xs text-muted-foreground">
                <div>
                  <span>CPU: {session.resource_usage.cpu}%</span>
                </div>
                <div>
                  <span>Memory: {session.resource_usage.memory}MB</span>
                </div>
                <div>
                  <span>Cost: ${session.resource_usage.cost}</span>
                </div>
              </div>

              {session.status === 'running' && (
                <Progress value={65} className="mt-2 h-1" />
              )}
            </motion.div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

// Routing Intelligence Visualizer
const RoutingIntelligenceVisualizer = () => {
  const [insights] = useState([
    "Based on task complexity, Scrapybara is optimal for this workload",
    "E2B would be 40% faster but may lack required browser features",
    "Current routing accuracy: 94.2% over last 100 executions"
  ]);

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <MamaBearAvatar size={24} isThinking />
          Mama Bear Insights
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="p-4 bg-gradient-to-r from-amber-50 to-orange-50 dark:from-amber-900/20 dark:to-orange-900/20 rounded-lg border">
            <div className="flex items-start gap-3">
              <MamaBearAvatar size={32} />
              <div className="flex-1">
                <p className="text-sm font-medium mb-2">Routing Intelligence</p>
                <div className="space-y-2">
                  {insights.map((insight, index) => (
                    <motion.p
                      key={index}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.2 }}
                      className="text-xs text-muted-foreground"
                    >
                      ‚Ä¢ {insight}
                    </motion.p>
                  ))}
                </div>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-3">
            <div className="text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
              <div className="text-lg font-bold text-blue-600">94.2%</div>
              <div className="text-xs text-muted-foreground">Routing Accuracy</div>
            </div>
            <div className="text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
              <div className="text-lg font-bold text-green-600">$127</div>
              <div className="text-xs text-muted-foreground">Cost Saved</div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

// Environment Status Panel
const EnvironmentStatusPanel = () => {
  const [environments] = useState<Record<string, EnvironmentStatus>>({
    e2b: {
      health: 'healthy',
      capacity: 75,
      response_time: 120,
      error_rate: 0.5,
      queue_length: 3
    },
    scrapybara: {
      health: 'warning',
      capacity: 90,
      response_time: 250,
      error_rate: 2.1,
      queue_length: 7
    }
  });

  const getHealthColor = (health: string) => {
    switch (health) {
      case 'healthy': return 'text-green-500';
      case 'warning': return 'text-yellow-500';
      case 'error': return 'text-red-500';
      default: return 'text-gray-500';
    }
  };

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Shield className="w-5 h-5 text-green-500" />
          Environment Status
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {Object.entries(environments).map(([env, status]) => (
            <div key={env} className="p-3 border rounded-lg">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center gap-2">
                  <div className={cn("w-2 h-2 rounded-full", 
                    status.health === 'healthy' ? 'bg-green-500' : 
                    status.health === 'warning' ? 'bg-yellow-500' : 'bg-red-500'
                  )} />
                  <span className="font-medium">{env.toUpperCase()}</span>
                </div>
                <Badge variant={status.health === 'healthy' ? 'default' : 'secondary'}>
                  {status.health}
                </Badge>
              </div>

              <div className="space-y-2">
                <div className="flex justify-between text-xs">
                  <span>Capacity</span>
                  <span>{status.capacity}%</span>
                </div>
                <Progress value={status.capacity} className="h-1" />

                <div className="grid grid-cols-2 gap-2 text-xs text-muted-foreground">
                  <div>Response: {status.response_time}ms</div>
                  <div>Queue: {status.queue_length}</div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

// Cost Optimization Metrics
const CostOptimizationMetrics = () => {
  const [timeRange, setTimeRange] = useState('24h');
  const [metrics] = useState<RouterMetrics>({
    total_executions: 1247,
    success_rate: 94.2,
    average_cost_per_execution: 0.15,
    environment_distribution: {
      e2b_percentage: 65,
      scrapybara_percentage: 35
    },
    cost_savings: 127.50,
    routing_accuracy: 94.2
  });

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <DollarSign className="w-5 h-5 text-green-500" />
          Cost Optimization
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <Select value={timeRange} onValueChange={setTimeRange}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="1h">Last Hour</SelectItem>
              <SelectItem value="24h">Last 24 Hours</SelectItem>
              <SelectItem value="7d">Last 7 Days</SelectItem>
              <SelectItem value="30d">Last 30 Days</SelectItem>
            </SelectContent>
          </Select>

          <div className="grid grid-cols-2 gap-3">
            <div className="text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
              <div className="text-lg font-bold text-green-600">${metrics.cost_savings}</div>
              <div className="text-xs text-muted-foreground">Saved</div>
            </div>
            <div className="text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
              <div className="text-lg font-bold text-blue-600">${metrics.average_cost_per_execution}</div>
              <div className="text-xs text-muted-foreground">Avg Cost</div>
            </div>
          </div>

          <div>
            <div className="flex justify-between text-sm mb-2">
              <span>Environment Distribution</span>
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-xs">
                <span>E2B</span>
                <span>{metrics.environment_distribution.e2b_percentage}%</span>
              </div>
              <Progress value={metrics.environment_distribution.e2b_percentage} className="h-2" />
              
              <div className="flex justify-between text-xs">
                <span>Scrapybara</span>
                <span>{metrics.environment_distribution.scrapybara_percentage}%</span>
              </div>
              <Progress value={metrics.environment_distribution.scrapybara_percentage} className="h-2" />
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

// Manual Routing Controls
const ManualRoutingControls = () => {
  const [overrideMode, setOverrideMode] = useState(false);
  const [selectedEnvironment, setSelectedEnvironment] = useState<'e2b' | 'scrapybara'>('e2b');

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Router className="w-5 h-5 text-orange-500" />
          Manual Controls
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex items-center justify-between">
          <Label htmlFor="override-mode">Override Mode</Label>
          <Switch 
            id="override-mode"
            checked={overrideMode}
            onCheckedChange={setOverrideMode}
          />
        </div>

        {overrideMode && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            className="space-y-3"
          >
            <div>
              <Label>Force Environment</Label>
              <Select value={selectedEnvironment} onValueChange={(value: 'e2b' | 'scrapybara') => setSelectedEnvironment(value)}>
                <SelectTrigger className="mt-1">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="e2b">E2B (Fast & Cheap)</SelectItem>
                  <SelectItem value="scrapybara">Scrapybara (Full VM)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <Button variant="outline" className="w-full">
              <Target className="w-4 h-4 mr-2" />
              Apply Override
            </Button>
          </motion.div>
        )}

        <Separator />

        <div className="space-y-2">
          <Button variant="outline" size="sm" className="w-full">
            <RefreshCw className="w-4 h-4 mr-2" />
            Health Check
          </Button>
          <Button variant="outline" size="sm" className="w-full">
            <Pause className="w-4 h-4 mr-2" />
            Emergency Stop
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

// Main Router Dashboard
const RouterDashboard = () => {
  const [activeTab, setActiveTab] = useState("overview");

  return (
    <div className="w-full max-w-7xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">
            ‚ö° Intelligent Execution Router
          </h1>
          <p className="text-muted-foreground mt-1">
            Autonomous task routing with Mama Bear intelligence
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Badge variant="outline" className="text-green-600 border-green-600">
            <div className="w-2 h-2 bg-green-500 rounded-full mr-1" />
            System Healthy
          </Badge>
        </div>
      </div>

      {/* Main Content */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="analysis">Task Analysis</TabsTrigger>
          <TabsTrigger value="monitoring">Monitoring</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2">
              <TaskAnalysisPanel />
            </div>
            <div>
              <RoutingIntelligenceVisualizer />
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <ExecutionSessionMonitor />
            <EnvironmentStatusPanel />
            <CostOptimizationMetrics />
          </div>
        </TabsContent>

        <TabsContent value="analysis" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <TaskAnalysisPanel />
            <ManualRoutingControls />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <RoutingIntelligenceVisualizer />
            <CostOptimizationMetrics />
          </div>
        </TabsContent>

        <TabsContent value="monitoring" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <ExecutionSessionMonitor />
            <EnvironmentStatusPanel />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <CostOptimizationMetrics />
            <ManualRoutingControls />
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default RouterDashboard;
