"use client";

import { useState, useEffect, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { cn } from "@/lib/utils";
import { 
  Settings, 
  Zap, 
  Brain, 
  RefreshCw, 
  Info, 
  Play, 
  Pause, 
  Activity, 
  DollarSign, 
  TrendingUp, 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  Server, 
  Cpu, 
  BarChart3, 
  Target, 
  Loader2, 
  Eye, 
  RotateCcw, 
  X,
  ChevronDown,
  ChevronUp,
  Monitor,
  Layers,
  Gauge
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Separator } from "@/components/ui/separator";

// Types
interface TaskAnalysis {
  task_id: string;
  complexity_score: number;
  estimated_duration: number;
  resource_requirements: {
    cpu: number;
    memory: number;
    storage: number;
  };
  recommended_environment: 'e2b' | 'scrapybara';
  confidence_level: number;
  analysis_factors: string[];
  routing_reason: string;
}

interface ExecutionSession {
  session_id: string;
  task_description: string;
  environment: 'e2b' | 'scrapybara';
  status: 'queued' | 'running' | 'completed' | 'failed' | 'cancelled';
  start_time: string;
  end_time?: string;
  duration?: number;
  resource_usage: {
    cpu: number;
    memory: number;
    cost: number;
  };
  cost_estimate: number;
  progress: number;
}

interface RouterMetrics {
  total_executions: number;
  success_rate: number;
  average_cost_per_execution: number;
  environment_distribution: {
    e2b_percentage: number;
    scrapybara_percentage: number;
  };
  cost_savings: number;
  routing_accuracy: number;
}

interface EnvironmentStatus {
  name: string;
  status: 'healthy' | 'warning' | 'error';
  response_time: number;
  queue_length: number;
  capacity_used: number;
  error_rate: number;
}

// Animated Particles Background Component
const AnimatedBackground = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationRef = useRef<number>(0);
  const particlesRef = useRef<any[]>([]);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const resizeCanvas = () => {
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    // Initialize particles
    const particleCount = 30;
    for (let i = 0; i < particleCount; i++) {
      particlesRef.current.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        radius: Math.random() * 2 + 1,
        vx: (Math.random() - 0.5) * 0.5,
        vy: (Math.random() - 0.5) * 0.5,
        opacity: Math.random() * 0.3 + 0.1
      });
    }

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      particlesRef.current.forEach(particle => {
        particle.x += particle.vx;
        particle.y += particle.vy;

        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;
        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;

        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);
        ctx.fillStyle = `rgba(139, 92, 246, ${particle.opacity})`;
        ctx.fill();
      });

      // Draw connections
      ctx.strokeStyle = 'rgba(139, 92, 246, 0.1)';
      ctx.lineWidth = 1;

      for (let i = 0; i < particlesRef.current.length; i++) {
        for (let j = i + 1; j < particlesRef.current.length; j++) {
          const dx = particlesRef.current[i].x - particlesRef.current[j].x;
          const dy = particlesRef.current[i].y - particlesRef.current[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < 100) {
            ctx.beginPath();
            ctx.moveTo(particlesRef.current[i].x, particlesRef.current[i].y);
            ctx.lineTo(particlesRef.current[j].x, particlesRef.current[j].y);
            ctx.stroke();
          }
        }
      }

      animationRef.current = requestAnimationFrame(animate);
    };

    animate();

    return () => {
      window.removeEventListener('resize', resizeCanvas);
      cancelAnimationFrame(animationRef.current);
    };
  }, []);

  return (
    <canvas
      ref={canvasRef}
      className="absolute inset-0 w-full h-full pointer-events-none opacity-30"
    />
  );
};

// Complexity Meter Component
const ComplexityMeter = ({ score, size = "md" }: { score: number; size?: "sm" | "md" | "lg" }) => {
  const sizeClasses = {
    sm: "w-16 h-16",
    md: "w-20 h-20",
    lg: "w-24 h-24"
  };

  const getColor = (score: number) => {
    if (score <= 3) return "text-green-500";
    if (score <= 6) return "text-yellow-500";
    return "text-red-500";
  };

  return (
    <div className={cn("relative", sizeClasses[size])}>
      <svg className="w-full h-full transform -rotate-90" viewBox="0 0 100 100">
        <circle
          cx="50"
          cy="50"
          r="45"
          stroke="currentColor"
          strokeWidth="8"
          fill="transparent"
          className="text-gray-200"
        />
        <circle
          cx="50"
          cy="50"
          r="45"
          stroke="currentColor"
          strokeWidth="8"
          fill="transparent"
          strokeDasharray={`${(score / 10) * 283} 283`}
          className={getColor(score)}
          strokeLinecap="round"
        />
      </svg>
      <div className="absolute inset-0 flex items-center justify-center">
        <span className={cn("font-bold", getColor(score))}>
          {score}/10
        </span>
      </div>
    </div>
  );
};

// Environment Badge Component
const EnvironmentBadge = ({ environment, status }: { environment: string; status: string }) => {
  const getEnvironmentColor = (env: string) => {
    switch (env) {
      case 'e2b':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'scrapybara':
        return 'bg-orange-100 text-orange-800 border-orange-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'running':
        return <Loader2 className="w-3 h-3 animate-spin" />;
      case 'completed':
        return <CheckCircle className="w-3 h-3" />;
      case 'failed':
        return <AlertTriangle className="w-3 h-3" />;
      default:
        return <Clock className="w-3 h-3" />;
    }
  };

  return (
    <Badge className={cn("flex items-center gap-1", getEnvironmentColor(environment))}>
      {getStatusIcon(status)}
      {environment.toUpperCase()}
    </Badge>
  );
};

// Task Analysis Panel Component
const TaskAnalysisPanel = () => {
  const [task, setTask] = useState("Scrape product data from e-commerce website and analyze pricing trends");
  const [analysis, setAnalysis] = useState<TaskAnalysis | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  const analyzeTask = () => {
    setIsAnalyzing(true);
    
    // Simulate API call
    setTimeout(() => {
      const mockAnalysis: TaskAnalysis = {
        task_id: `task_${Date.now()}`,
        complexity_score: Math.floor(Math.random() * 10) + 1,
        estimated_duration: Math.floor(Math.random() * 300) + 60,
        resource_requirements: {
          cpu: Math.floor(Math.random() * 80) + 20,
          memory: Math.floor(Math.random() * 60) + 40,
          storage: Math.floor(Math.random() * 50) + 10
        },
        recommended_environment: Math.random() > 0.5 ? 'e2b' : 'scrapybara',
        confidence_level: Math.random() * 0.3 + 0.7,
        analysis_factors: [
          "Web scraping complexity",
          "Data processing requirements",
          "Expected execution time",
          "Resource optimization"
        ],
        routing_reason: "Based on task complexity and resource requirements, this environment provides optimal cost-performance balance."
      };
      
      setAnalysis(mockAnalysis);
      setIsAnalyzing(false);
    }, 2000);
  };

  const executeTask = (environment?: 'e2b' | 'scrapybara') => {
    console.log(`Executing task in ${environment || analysis?.recommended_environment}`);
  };

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Brain className="w-5 h-5 text-purple-600" />
          Task Analysis
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <label className="text-sm font-medium mb-2 block">Task Description</label>
          <Textarea
            value={task}
            onChange={(e) => setTask(e.target.value)}
            placeholder="Describe your task..."
            className="min-h-[80px]"
          />
        </div>

        <Button 
          onClick={analyzeTask} 
          disabled={isAnalyzing || !task.trim()}
          className="w-full"
        >
          {isAnalyzing ? (
            <>
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              Analyzing...
            </>
          ) : (
            <>
              <Target className="w-4 h-4 mr-2" />
              Analyze Task
            </>
          )}
        </Button>

        {analysis && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="space-y-4 p-4 bg-gray-50 rounded-lg"
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <ComplexityMeter score={analysis.complexity_score} size="sm" />
                <div>
                  <p className="font-medium">Complexity Score</p>
                  <p className="text-sm text-gray-600">
                    {analysis.complexity_score <= 3 ? 'Low' : 
                     analysis.complexity_score <= 6 ? 'Medium' : 'High'}
                  </p>
                </div>
              </div>
              <EnvironmentBadge 
                environment={analysis.recommended_environment} 
                status="recommended" 
              />
            </div>

            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p className="font-medium">Duration</p>
                <p className="text-gray-600">{Math.floor(analysis.estimated_duration / 60)}m {analysis.estimated_duration % 60}s</p>
              </div>
              <div>
                <p className="font-medium">Confidence</p>
                <p className="text-gray-600">{Math.round(analysis.confidence_level * 100)}%</p>
              </div>
            </div>

            <div>
              <p className="font-medium text-sm mb-2">Resource Requirements</p>
              <div className="space-y-2">
                <div className="flex justify-between text-xs">
                  <span>CPU</span>
                  <span>{analysis.resource_requirements.cpu}%</span>
                </div>
                <Progress value={analysis.resource_requirements.cpu} className="h-2" />
                
                <div className="flex justify-between text-xs">
                  <span>Memory</span>
                  <span>{analysis.resource_requirements.memory}%</span>
                </div>
                <Progress value={analysis.resource_requirements.memory} className="h-2" />
              </div>
            </div>

            <div className="flex gap-2">
              <Button 
                onClick={() => executeTask()} 
                className="flex-1"
                size="sm"
              >
                Execute ({analysis.recommended_environment.toUpperCase()})
              </Button>
              <Button 
                onClick={() => executeTask(analysis.recommended_environment === 'e2b' ? 'scrapybara' : 'e2b')} 
                variant="outline"
                size="sm"
              >
                Override
              </Button>
            </div>
          </motion.div>
        )}
      </CardContent>
    </Card>
  );
};

// Execution Session Monitor Component
const ExecutionSessionMonitor = () => {
  const [sessions] = useState<ExecutionSession[]>([
    {
      session_id: "sess_001",
      task_description: "Web scraping e-commerce data",
      environment: "e2b",
      status: "running",
      start_time: new Date(Date.now() - 120000).toISOString(),
      resource_usage: { cpu: 45, memory: 60, cost: 0.12 },
      cost_estimate: 0.25,
      progress: 65
    },
    {
      session_id: "sess_002", 
      task_description: "Data analysis and visualization",
      environment: "scrapybara",
      status: "completed",
      start_time: new Date(Date.now() - 300000).toISOString(),
      end_time: new Date(Date.now() - 60000).toISOString(),
      duration: 240,
      resource_usage: { cpu: 80, memory: 75, cost: 0.45 },
      cost_estimate: 0.45,
      progress: 100
    },
    {
      session_id: "sess_003",
      task_description: "Machine learning model training",
      environment: "scrapybara", 
      status: "queued",
      start_time: new Date().toISOString(),
      resource_usage: { cpu: 0, memory: 0, cost: 0 },
      cost_estimate: 1.20,
      progress: 0
    }
  ]);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'running':
        return 'text-blue-600 bg-blue-100';
      case 'completed':
        return 'text-green-600 bg-green-100';
      case 'failed':
        return 'text-red-600 bg-red-100';
      case 'queued':
        return 'text-yellow-600 bg-yellow-100';
      default:
        return 'text-gray-600 bg-gray-100';
    }
  };

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Activity className="w-5 h-5 text-green-600" />
          Active Sessions
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {sessions.map((session) => (
            <motion.div
              key={session.session_id}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="p-3 border rounded-lg hover:bg-gray-50 transition-colors"
            >
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <Badge className={getStatusColor(session.status)}>
                    {session.status}
                  </Badge>
                  <EnvironmentBadge 
                    environment={session.environment} 
                    status={session.status} 
                  />
                </div>
                <span className="text-sm text-gray-500">
                  ${session.resource_usage.cost.toFixed(2)}
                </span>
              </div>
              
              <p className="text-sm font-medium mb-2">{session.task_description}</p>
              
              {session.status === 'running' && (
                <div className="space-y-1">
                  <div className="flex justify-between text-xs">
                    <span>Progress</span>
                    <span>{session.progress}%</span>
                  </div>
                  <Progress value={session.progress} className="h-2" />
                </div>
              )}
              
              <div className="flex justify-between text-xs text-gray-500 mt-2">
                <span>Started: {new Date(session.start_time).toLocaleTimeString()}</span>
                {session.end_time && (
                  <span>Completed: {new Date(session.end_time).toLocaleTimeString()}</span>
                )}
              </div>
            </motion.div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

// Environment Status Panel Component
const EnvironmentStatusPanel = () => {
  const [environments] = useState<EnvironmentStatus[]>([
    {
      name: "E2B",
      status: "healthy",
      response_time: 120,
      queue_length: 3,
      capacity_used: 45,
      error_rate: 0.2
    },
    {
      name: "Scrapybara",
      status: "warning", 
      response_time: 340,
      queue_length: 8,
      capacity_used: 78,
      error_rate: 1.5
    }
  ]);

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'healthy':
        return <CheckCircle className="w-5 h-5 text-green-500" />;
      case 'warning':
        return <AlertTriangle className="w-5 h-5 text-yellow-500" />;
      case 'error':
        return <X className="w-5 h-5 text-red-500" />;
      default:
        return <Clock className="w-5 h-5 text-gray-500" />;
    }
  };

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Server className="w-5 h-5 text-blue-600" />
          Environment Status
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {environments.map((env) => (
            <div key={env.name} className="p-4 border rounded-lg">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center gap-2">
                  {getStatusIcon(env.status)}
                  <h3 className="font-medium">{env.name}</h3>
                </div>
                <Badge variant="outline">{env.status}</Badge>
              </div>
              
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <p className="text-gray-600">Response Time</p>
                  <p className="font-medium">{env.response_time}ms</p>
                </div>
                <div>
                  <p className="text-gray-600">Queue Length</p>
                  <p className="font-medium">{env.queue_length}</p>
                </div>
                <div>
                  <p className="text-gray-600">Capacity Used</p>
                  <div className="flex items-center gap-2">
                    <Progress value={env.capacity_used} className="h-2 flex-1" />
                    <span className="text-xs">{env.capacity_used}%</span>
                  </div>
                </div>
                <div>
                  <p className="text-gray-600">Error Rate</p>
                  <p className="font-medium">{env.error_rate}%</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

// Cost Optimization Metrics Component
const CostOptimizationMetrics = () => {
  const [metrics] = useState<RouterMetrics>({
    total_executions: 1247,
    success_rate: 94.2,
    average_cost_per_execution: 0.34,
    environment_distribution: {
      e2b_percentage: 65,
      scrapybara_percentage: 35
    },
    cost_savings: 23.7,
    routing_accuracy: 91.5
  });

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <DollarSign className="w-5 h-5 text-green-600" />
          Cost Optimization
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-4">
          <div className="text-center p-3 bg-green-50 rounded-lg">
            <p className="text-2xl font-bold text-green-600">${metrics.cost_savings}%</p>
            <p className="text-sm text-gray-600">Cost Savings</p>
          </div>
          
          <div className="text-center p-3 bg-blue-50 rounded-lg">
            <p className="text-2xl font-bold text-blue-600">{metrics.routing_accuracy}%</p>
            <p className="text-sm text-gray-600">Routing Accuracy</p>
          </div>
          
          <div className="text-center p-3 bg-purple-50 rounded-lg">
            <p className="text-2xl font-bold text-purple-600">{metrics.total_executions}</p>
            <p className="text-sm text-gray-600">Total Executions</p>
          </div>
          
          <div className="text-center p-3 bg-orange-50 rounded-lg">
            <p className="text-2xl font-bold text-orange-600">${metrics.average_cost_per_execution}</p>
            <p className="text-sm text-gray-600">Avg Cost</p>
          </div>
        </div>
        
        <Separator className="my-4" />
        
        <div>
          <p className="font-medium mb-3">Environment Distribution</p>
          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span>E2B</span>
              <span>{metrics.environment_distribution.e2b_percentage}%</span>
            </div>
            <Progress value={metrics.environment_distribution.e2b_percentage} className="h-2" />
            
            <div className="flex justify-between text-sm">
              <span>Scrapybara</span>
              <span>{metrics.environment_distribution.scrapybara_percentage}%</span>
            </div>
            <Progress value={metrics.environment_distribution.scrapybara_percentage} className="h-2" />
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

// Mama Bear Intelligence Visualizer Component
const MamaBearIntelligence = () => {
  const [insights] = useState([
    "Current routing is optimizing for cost-effectiveness",
    "E2B environment showing excellent performance for simple tasks",
    "Consider using Scrapybara for complex data processing tasks",
    "Recent routing decisions have improved efficiency by 15%"
  ]);

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Brain className="w-5 h-5 text-purple-600" />
          Mama Bear Intelligence
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="flex items-center gap-3 mb-4">
          <div className="w-12 h-12 bg-gradient-to-br from-purple-400 to-purple-600 rounded-full flex items-center justify-center">
            <span className="text-white text-lg">🐻</span>
          </div>
          <div>
            <p className="font-medium">Mama Bear</p>
            <p className="text-sm text-gray-600">AI Routing Assistant</p>
          </div>
        </div>
        
        <div className="space-y-3">
          {insights.map((insight, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: index * 0.1 }}
              className="p-3 bg-purple-50 rounded-lg border-l-4 border-purple-400"
            >
              <p className="text-sm">{insight}</p>
            </motion.div>
          ))}
        </div>
        
        <Button variant="outline" className="w-full mt-4">
          <RefreshCw className="w-4 h-4 mr-2" />
          Get New Insights
        </Button>
      </CardContent>
    </Card>
  );
};

// Main Router Dashboard Component
const RouterDashboard = () => {
  const [activeTab, setActiveTab] = useState("overview");

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 relative overflow-hidden">
      <AnimatedBackground />
      
      <div className="relative z-10 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <div className="flex items-center gap-3 mb-2">
              <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-purple-700 rounded-lg flex items-center justify-center">
                <Zap className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-3xl font-bold text-gray-900">
                  Intelligent Execution Router
                </h1>
                <p className="text-gray-600">
                  Autonomous task routing with Mama Bear intelligence
                </p>
              </div>
            </div>
          </div>

          {/* Tabs */}
          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="analysis">Analysis</TabsTrigger>
              <TabsTrigger value="monitoring">Monitoring</TabsTrigger>
              <TabsTrigger value="optimization">Optimization</TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="lg:col-span-2">
                  <TaskAnalysisPanel />
                </div>
                <div>
                  <MamaBearIntelligence />
                </div>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <ExecutionSessionMonitor />
                <EnvironmentStatusPanel />
              </div>
            </TabsContent>

            <TabsContent value="analysis" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <TaskAnalysisPanel />
                <MamaBearIntelligence />
              </div>
            </TabsContent>

            <TabsContent value="monitoring" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <ExecutionSessionMonitor />
                <EnvironmentStatusPanel />
              </div>
            </TabsContent>

            <TabsContent value="optimization" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <CostOptimizationMetrics />
                <MamaBearIntelligence />
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
};

export default function Component() {
  return <RouterDashboard />;
}
