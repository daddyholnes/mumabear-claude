"use client";

import React, { useState, useRef, useEffect, createContext, useContext, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  Computer,
  MessageCircle,
  Send,
  Paperclip,
  Image,
  Mic,
  Smile,
  Globe,
  X,
  FolderIcon,
  FileIcon,
  Terminal,
  Code2,
  Eye,
  Upload,
  Copy,
  Maximize2,
  Minimize2,
  Plus,
  FilePlus,
  FolderPlus,
  ChevronDown,
  ChevronUp
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { ResizablePanelGroup, ResizablePanel, ResizableHandle } from "@/components/ui/resizable";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";

// Types
interface Message {
  id: string;
  content: string;
  sender: "user" | "ai";
  timestamp: Date;
}

interface FileNode {
  id: string;
  name: string;
  type: "file" | "folder";
  children?: FileNode[];
  content?: string;
}

interface OpenFile {
  id: string;
  name: string;
  content: string;
}

// Hooks
const useAutoScroll = ({ smooth = false, content }: { smooth?: boolean; content: React.ReactNode }) => {
  const scrollRef = useRef<HTMLDivElement>(null);
  const [isAtBottom, setIsAtBottom] = useState(true);
  const [autoScrollEnabled, setAutoScrollEnabled] = useState(true);

  const scrollToBottom = useCallback(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTo({
        top: scrollRef.current.scrollHeight,
        behavior: smooth ? "smooth" : "auto",
      });
      setIsAtBottom(true);
      setAutoScrollEnabled(true);
    }
  }, [smooth]);

  const disableAutoScroll = useCallback(() => {
    setAutoScrollEnabled(false);
  }, []);

  useEffect(() => {
    if (autoScrollEnabled && scrollRef.current) {
      scrollToBottom();
    }
  }, [content, autoScrollEnabled, scrollToBottom]);

  useEffect(() => {
    const element = scrollRef.current;
    if (!element) return;

    const handleScroll = () => {
      const { scrollTop, scrollHeight, clientHeight } = element;
      const atBottom = scrollTop + clientHeight >= scrollHeight - 10;
      setIsAtBottom(atBottom);

      if (!atBottom) {
        setAutoScrollEnabled(false);
      }
    };

    element.addEventListener("scroll", handleScroll);
    return () => element.removeEventListener("scroll", handleScroll);
  }, []);

  return {
    scrollRef,
    isAtBottom,
    autoScrollEnabled,
    scrollToBottom,
    disableAutoScroll,
  };
};

const useAutoResizeTextarea = ({ minHeight = 32, maxHeight = 120 }: { minHeight?: number; maxHeight?: number }) => {
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const adjustHeight = useCallback((reset = false) => {
    const textarea = textareaRef.current;
    if (!textarea) return;

    if (reset) {
      textarea.style.height = `${minHeight}px`;
      return;
    }

    textarea.style.height = "auto";
    const scrollHeight = textarea.scrollHeight;
    const newHeight = Math.min(Math.max(scrollHeight, minHeight), maxHeight);
    textarea.style.height = `${newHeight}px`;
  }, [minHeight, maxHeight]);

  return { textareaRef, adjustHeight };
};

// Chat Components
const ChatBubble = ({ children, variant, className, ...props }: {
  children: React.ReactNode;
  variant: "sent" | "received";
  className?: string;
}) => (
  <motion.div
    initial={{ opacity: 0, y: 10 }}
    animate={{ opacity: 1, y: 0 }}
    className={cn(
      "flex gap-2 max-w-[80%]",
      variant === "sent" ? "ml-auto flex-row-reverse" : "mr-auto",
      className
    )}
    {...props}
  >
    {children}
  </motion.div>
);

const ChatBubbleAvatar = ({ src, fallback, className }: {
  src?: string;
  fallback: string;
  className?: string;
}) => (
  <div className={cn("rounded-full bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center text-white font-semibold text-xs", className)}>
    {fallback}
  </div>
);

const ChatBubbleMessage = ({ children, variant, isLoading, className }: {
  children?: React.ReactNode;
  variant: "sent" | "received";
  isLoading?: boolean;
  className?: string;
}) => (
  <div
    className={cn(
      "rounded-2xl px-3 py-2 shadow-sm text-sm backdrop-blur-sm",
      variant === "sent"
        ? "bg-gradient-to-r from-purple-600 to-pink-600 text-white"
        : "bg-background/80 border border-purple-200/50 text-foreground",
      className
    )}
  >
    {isLoading ? (
      <div className="flex space-x-1">
        {[0, 1, 2].map((i) => (
          <motion.div
            key={i}
            className="w-1.5 h-1.5 bg-current rounded-full"
            animate={{ opacity: [0.4, 1, 0.4] }}
            transition={{ duration: 1.5, repeat: Infinity, delay: i * 0.2 }}
          />
        ))}
      </div>
    ) : (
      children
    )}
  </div>
);

const ChatMessageList = ({ children, className }: {
  children: React.ReactNode;
  className?: string;
}) => {
  const { scrollRef, isAtBottom, scrollToBottom } = useAutoScroll({
    smooth: true,
    content: children,
  });

  return (
    <div className="relative w-full h-full">
      <ScrollArea
        className={cn("h-full p-4", className)}
        ref={scrollRef}
      >
        <div className="space-y-4">{children}</div>
      </ScrollArea>

      {!isAtBottom && (
        <Button
          onClick={scrollToBottom}
          size="icon"
          variant="outline"
          className="absolute bottom-4 left-1/2 transform -translate-x-1/2 rounded-full shadow-lg bg-background/80 backdrop-blur-sm border-purple-200/50 h-8 w-8 text-sm"
        >
          <motion.div
            animate={{ y: [0, 2, 0] }}
            transition={{ duration: 1, repeat: Infinity }}
          >
            â†“
          </motion.div>
        </Button>
      )}
    </div>
  );
};

// File Tree Components
const FileTreeContext = createContext<{
  selectedFile: string | null;
  setSelectedFile: (id: string) => void;
  expandedFolders: Set<string>;
  toggleFolder: (id: string) => void;
  openFileInEditor: (file: OpenFile) => void;
} | null>(null);

const useFileTree = () => {
  const context = useContext(FileTreeContext);
  if (!context) throw new Error("useFileTree must be used within FileTreeProvider");
  return context;
};

const FileTreeProvider = ({ children, openFileInEditor }: { children: React.ReactNode; openFileInEditor: (file: OpenFile) => void }) => {
  const [selectedFile, setSelectedFile] = useState<string | null>(null);
  const [expandedFolders, setExpandedFolders] = useState(new Set<string>());

  const toggleFolder = (id: string) => {
    setExpandedFolders(prev => {
      const next = new Set(prev);
      if (next.has(id)) {
        next.delete(id);
      } else {
        next.add(id);
      }
      return next;
    });
  };

  return (
    <FileTreeContext.Provider value={{ selectedFile, setSelectedFile, expandedFolders, toggleFolder, openFileInEditor }}>
      {children}
    </FileTreeContext.Provider>
  );
};

const FileTreeNode = ({ node, depth = 0 }: { node: FileNode; depth?: number }) => {
  const { selectedFile, setSelectedFile, expandedFolders, toggleFolder, openFileInEditor } = useFileTree();
  const isExpanded = expandedFolders.has(node.id);
  const isSelected = selectedFile === node.id;

  return (
    <div>
      <motion.div
        className={cn(
          "flex items-center gap-1 px-1 py-0.5 rounded-md cursor-pointer text-sm hover:bg-purple-100/50 dark:hover:bg-purple-900/20 transition-colors",
          isSelected && "bg-purple-200/50 dark:bg-purple-800/30",
        )}
        style={{ paddingLeft: `${depth * 12 + 4}px` }}
        onClick={() => {
          if (node.type === "folder") {
            toggleFolder(node.id);
          } else {
            setSelectedFile(node.id);
            if (node.content) {
              openFileInEditor({ id: node.id, name: node.name, content: node.content });
            }
          }
        }}
        whileHover={{ scale: 1.01 }}
        whileTap={{ scale: 0.99 }}
      >
        {node.type === "folder" ? (
          <motion.div
            animate={{ rotate: isExpanded ? 90 : 0 }}
            transition={{ duration: 0.2 }}
          >
            <FolderIcon className="w-3 h-3 text-purple-500" />
          </motion.div>
        ) : (
          <FileIcon className="w-3 h-3 text-blue-500" />
        )}
        <span className="text-xs">{node.name}</span>
      </motion.div>

      <AnimatePresence>
        {node.type === "folder" && isExpanded && node.children && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: "auto", opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="overflow-hidden"
          >
            {node.children.map(child => (
              <FileTreeNode key={child.id} node={child} depth={depth + 1} />
            ))}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

// Main Component
const AIAgentCodeBuilder = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      content: "Hello! I'm your AI coding assistant. I can help you build, debug, and understand code. What would you like to work on today?",
      sender: "ai",
      timestamp: new Date(),
    },
  ]);

  const [inputValue, setInputValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [browserOpen, setBrowserOpen] = useState(false);
  const [searchEnabled, setSearchEnabled] = useState(false);
  const [terminalOpen, setTerminalOpen] = useState(false);
  const [openFiles, setOpenFiles] = useState<OpenFile[]>([]);
  const [activeFileTab, setActiveFileTab] = useState<string | undefined>(undefined);

  const { textareaRef, adjustHeight } = useAutoResizeTextarea({ minHeight: 32, maxHeight: 120 });

  const fileTree: FileNode[] = [
    {
      id: "src",
      name: "src",
      type: "folder",
      children: [
        {
          id: "components",
          name: "components",
          type: "folder",
          children: [
            { id: "button.tsx", name: "Button.tsx", type: "file", content: "export const Button = () => <button>Click me</button>;" },
            { id: "input.tsx", name: "Input.tsx", type: "file", content: "export const Input = () => <input />;" },
          ],
        },
        { id: "app.tsx", name: "App.tsx", type: "file", content: "import React from 'react';\n\nfunction App() {\n  return <div>Hello World</div>;\n}\n\nexport default App;" },
        { id: "index.tsx", name: "index.tsx", type: "file", content: "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));" },
      ],
    },
    {
      id: "public",
      name: "public",
      type: "folder",
      children: [
        { id: "index.html", name: "index.html", type: "file", content: "<!DOCTYPE html>\n<html>\n<body>\n  <div id=\"root\"></div>\n</body>\n</html>" },
      ]
    },
    { id: "package.json", name: "package.json", type: "file", content: "{\n  \"name\": \"my-app\",\n  \"version\": \"0.1.0\"\n}" },
  ];

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;

    const newMessage: Message = {
      id: Date.now().toString(),
      content: inputValue,
      sender: "user",
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, newMessage]);
    setInputValue("");
    adjustHeight(true);
    setIsLoading(true);

    // Simulate AI response
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        content: "I understand you want to work on that. Let me help you with the implementation. Would you like me to create a new file or modify an existing one?",
        sender: "ai",
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, aiResponse]);
      setIsLoading(false);
    }, 1500);
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      console.log("File uploaded:", file.name);
    }
  };

  const handleImagePaste = (event: React.ClipboardEvent) => {
    const items = event.clipboardData?.items;
    if (items) {
      for (let i = 0; i < items.length; i++) {
        if (items[i].type.indexOf("image") !== -1) {
          const blob = items[i].getAsFile();
          console.log("Image pasted:", blob);
        }
      }
    }
  };

  const openFileInEditor = useCallback((file: OpenFile) => {
    setOpenFiles(prev => {
      if (!prev.some(f => f.id === file.id)) {
        return [...prev, file];
      }
      return prev;
    });
    setActiveFileTab(file.id);
  }, []);

  const closeFileTab = useCallback((fileId: string) => {
    setOpenFiles(prev => {
      const newOpenFiles = prev.filter(f => f.id !== fileId);
      if (activeFileTab === fileId) {
        setActiveFileTab(newOpenFiles.length > 0 ? newOpenFiles[0].id : undefined);
      }
      return newOpenFiles;
    });
  }, [activeFileTab]);

  return (
    <div className="h-screen w-full bg-gradient-to-br from-purple-900/20 via-background to-pink-900/20 flex flex-col overflow-hidden text-sm">
      {/* Header */}
      <motion.header
        className="h-12 border-b border-purple-200/30 bg-background/80 backdrop-blur-sm flex items-center justify-between px-4"
        initial={{ y: -48 }}
        animate={{ y: 0 }}
        transition={{ duration: 0.3 }}
      >
        <div className="flex items-center gap-3">
          <motion.div
            className="w-6 h-6 rounded-md bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center"
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
          >
            <Code2 className="w-3 h-3 text-white" />
          </motion.div>
          <h1 className="text-base font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
            AI Code Builder
          </h1>
        </div>

        <div className="flex items-center gap-2">
          <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setBrowserOpen(!browserOpen)}
              className="rounded-full border-purple-200/50 hover:bg-purple-100/50 h-8 px-3 text-xs"
            >
              <Globe className="w-3 h-3 mr-1" />
              Browser
            </Button>
          </motion.div>

          <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="rounded-full border-purple-200/50 hover:bg-purple-100/50 h-8 px-3 text-xs"
            >
              <Computer className="w-3 h-3 mr-1" />
              Code View
            </Button>
          </motion.div>
        </div>
      </motion.header>

      <ResizablePanelGroup direction="horizontal" className="flex-1 overflow-hidden">
        {/* Left Sidebar */}
        <AnimatePresence>
          {sidebarOpen && (
            <ResizablePanel
              defaultSize={20}
              minSize={15}
              maxSize={30}
              className="border-r border-purple-200/30 bg-background/80 backdrop-blur-sm flex flex-col"
            >
              <ResizablePanelGroup direction="vertical">
                <ResizablePanel defaultSize={50} minSize={30}>
                  <div className="p-3 border-b border-purple-200/30 flex items-center justify-between">
                    <h3 className="font-semibold text-xs flex items-center gap-1">
                      <FolderIcon className="w-3 h-3" />
                      File Explorer
                    </h3>
                    <div className="flex gap-1">
                      <Button variant="ghost" size="icon" className="h-6 w-6 text-xs" title="New File">
                        <FilePlus className="w-3 h-3" />
                      </Button>
                      <Button variant="ghost" size="icon" className="h-6 w-6 text-xs" title="New Folder">
                        <FolderPlus className="w-3 h-3" />
                      </Button>
                    </div>
                  </div>
                  <ScrollArea className="h-[calc(100%-36px)] p-2">
                    <FileTreeProvider openFileInEditor={openFileInEditor}>
                      {fileTree.map(node => (
                        <FileTreeNode key={node.id} node={node} />
                      ))}
                    </FileTreeProvider>
                  </ScrollArea>
                </ResizablePanel>
                <ResizableHandle withHandle />
                <ResizablePanel defaultSize={50} minSize={0}>
                  <div className="p-3 border-b border-purple-200/30 flex items-center justify-between">
                    <h3 className="font-semibold text-xs flex items-center gap-1">
                      <Terminal className="w-3 h-3" />
                      Terminal
                    </h3>
                    <Button variant="ghost" size="icon" className="h-6 w-6 text-xs" onClick={() => setTerminalOpen(!terminalOpen)}>
                      {terminalOpen ? <ChevronUp className="w-3 h-3" /> : <ChevronDown className="w-3 h-3" />}
                    </Button>
                  </div>
                  <AnimatePresence>
                    {terminalOpen && (
                      <motion.div
                        initial={{ height: 0, opacity: 0 }}
                        animate={{ height: "auto", opacity: 1 }}
                        exit={{ height: 0, opacity: 0 }}
                        transition={{ duration: 0.2 }}
                        className="overflow-hidden h-[calc(100%-36px)]"
                      >
                        <div className="p-2 font-mono text-xs bg-black/20 h-full">
                          <div className="text-green-400">$ npm run dev</div>
                          <div className="text-gray-400">Starting development server...</div>
                          <div className="text-blue-400">Local: http://localhost:3000</div>
                          <div className="animate-pulse">_</div>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </ResizablePanel>
              </ResizablePanelGroup>
            </ResizablePanel>
          )}
        </AnimatePresence>

        {sidebarOpen && <ResizableHandle withHandle />}

        {/* Main Chat Area */}
        <ResizablePanel defaultSize={sidebarOpen ? 60 : 100} minSize={30}>
          <div className="flex-1 flex flex-col h-full">
            <div className="flex-1 relative">
              <ChatMessageList>
                {messages.map((message) => (
                  <ChatBubble key={message.id} variant={message.sender === "user" ? "sent" : "received"}>
                    <ChatBubbleAvatar
                      fallback={message.sender === "user" ? "U" : "AI"}
                      className="w-6 h-6"
                    />
                    <ChatBubbleMessage variant={message.sender === "user" ? "sent" : "received"}>
                      {message.content}
                    </ChatBubbleMessage>
                  </ChatBubble>
                ))}

                {isLoading && (
                  <ChatBubble variant="received">
                    <ChatBubbleAvatar fallback="AI" className="w-6 h-6" />
                    <ChatBubbleMessage variant="received" isLoading />
                  </ChatBubble>
                )}
              </ChatMessageList>
            </div>

            {/* Input Area */}
            <motion.div
              className="p-4 border-t border-purple-200/30 bg-background/80 backdrop-blur-sm"
              initial={{ y: 80 }}
              animate={{ y: 0 }}
              transition={{ duration: 0.3, delay: 0.1 }}
            >
              <div className="max-w-3xl mx-auto">
                <div className="relative rounded-2xl border border-purple-200/50 bg-background/60 backdrop-blur-sm shadow-md overflow-hidden">
                  <Textarea
                    ref={textareaRef}
                    value={inputValue}
                    onChange={(e) => {
                      setInputValue(e.target.value);
                      adjustHeight();
                    }}
                    onPaste={handleImagePaste}
                    onKeyDown={(e) => {
                      if (e.key === "Enter" && !e.shiftKey) {
                        e.preventDefault();
                        handleSendMessage();
                      }
                    }}
                    placeholder={searchEnabled ? "Search the web and ask me anything..." : "Ask me anything about coding..."}
                    className="min-h-[32px] resize-none border-0 bg-transparent px-4 py-2 focus-visible:ring-0 text-sm"
                  />

                  <div className="flex items-center justify-between px-3 pb-2">
                    <div className="flex items-center gap-1">
                      <input
                        type="file"
                        id="file-upload"
                        className="hidden"
                        onChange={handleFileUpload}
                        accept="*/*"
                      />
                      <motion.label
                        htmlFor="file-upload"
                        className="p-1.5 rounded-full hover:bg-purple-100/50 cursor-pointer transition-colors"
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                      >
                        <Paperclip className="w-3 h-3 text-purple-500" />
                      </motion.label>

                      <input
                        type="file"
                        id="image-upload"
                        className="hidden"
                        accept="image/*"
                        onChange={handleFileUpload}
                      />
                      <motion.label
                        htmlFor="image-upload"
                        className="p-1.5 rounded-full hover:bg-purple-100/50 cursor-pointer transition-colors"
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                      >
                        <Image className="w-3 h-3 text-purple-500" />
                      </motion.label>

                      <motion.button
                        className="p-1.5 rounded-full hover:bg-purple-100/50 transition-colors"
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                      >
                        <Mic className="w-3 h-3 text-purple-500" />
                      </motion.button>

                      <motion.button
                        className="p-1.5 rounded-full hover:bg-purple-100/50 transition-colors"
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                      >
                        <Smile className="w-3 h-3 text-purple-500" />
                      </motion.button>

                      <motion.button
                        onClick={() => setSearchEnabled(!searchEnabled)}
                        className={cn(
                          "flex items-center gap-1 px-2 py-0.5 rounded-full text-xs transition-all",
                          searchEnabled
                            ? "bg-purple-500 text-white"
                            : "bg-purple-100/50 text-purple-600 hover:bg-purple-200/50"
                        )}
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        <Globe className="w-3 h-3" />
                        {searchEnabled && <span className="text-xs">Search</span>}
                      </motion.button>
                    </div>

                    <motion.button
                      onClick={handleSendMessage}
                      disabled={!inputValue.trim()}
                      className={cn(
                        "p-1.5 rounded-full transition-all",
                        inputValue.trim()
                          ? "bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-md"
                          : "bg-gray-200 text-gray-400"
                      )}
                      whileHover={inputValue.trim() ? { scale: 1.1 } : {}}
                      whileTap={inputValue.trim() ? { scale: 0.9 } : {}}
                    >
                      <Send className="w-3 h-3" />
                    </motion.button>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>
        </ResizablePanel>

        {sidebarOpen && <ResizableHandle withHandle />}

        {/* Right Sidebar */}
        <AnimatePresence>
          {sidebarOpen && (
            <ResizablePanel
              defaultSize={20}
              minSize={15}
              maxSize={30}
              className="border-l border-purple-200/30 bg-background/80 backdrop-blur-sm flex flex-col"
            >
              <ResizablePanelGroup direction="vertical">
                <ResizablePanel defaultSize={50} minSize={30}>
                  <div className="p-3 border-b border-purple-200/30">
                    <h3 className="font-semibold text-xs flex items-center gap-1">
                      <Code2 className="w-3 h-3" />
                      Code Editor
                    </h3>
                  </div>
                  <div className="h-[calc(100%-36px)] flex flex-col">
                    {openFiles.length > 0 && (
                      <Tabs value={activeFileTab} onValueChange={setActiveFileTab} className="w-full">
                        <ScrollArea className="w-full whitespace-nowrap border-b border-purple-200/30">
                          <TabsList className="h-8 rounded-none bg-transparent p-0">
                            {openFiles.map(file => (
                              <TabsTrigger
                                key={file.id}
                                value={file.id}
                                className="relative h-8 px-3 py-0 text-xs data-[state=active]:bg-background/80 data-[state=active]:shadow-none rounded-none"
                              >
                                {file.name}
                                <Button
                                  variant="ghost"
                                  size="icon"
                                  className="h-4 w-4 ml-2 absolute right-1 top-1/2 -translate-y-1/2 opacity-0 group-hover:opacity-100 data-[state=active]:opacity-100"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    closeFileTab(file.id);
                                  }}
                                >
                                  <X className="h-3 w-3" />
                                </Button>
                              </TabsTrigger>
                            ))}
                          </TabsList>
                        </ScrollArea>
                        {openFiles.map(file => (
                          <TabsContent key={file.id} value={file.id} className="mt-0 h-[calc(100%-32px)]">
                            <ScrollArea className="h-full p-2 font-mono text-xs bg-black/10">
                              <pre className="whitespace-pre-wrap">{file.content}</pre>
                            </ScrollArea>
                          </TabsContent>
                        ))}
                      </Tabs>
                    )}
                    {openFiles.length === 0 && (
                      <div className="h-full flex items-center justify-center text-gray-400 text-xs">
                        No file open
                      </div>
                    )}
                  </div>
                </ResizablePanel>
                <ResizableHandle withHandle />
                <ResizablePanel defaultSize={50} minSize={30}>
                  <div className="p-3 border-b border-purple-200/30">
                    <h3 className="font-semibold text-xs flex items-center gap-1">
                      <Eye className="w-3 h-3" />
                      Preview
                    </h3>
                  </div>
                  <div className="h-[calc(100%-36px)] p-2 bg-white/50 flex items-center justify-center">
                    <div className="text-center">
                      <h1 className="text-lg font-bold mb-2">Count: 0</h1>
                      <button className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors text-xs">
                        Increment
                      </button>
                    </div>
                  </div>
                </ResizablePanel>
              </ResizablePanelGroup>
            </ResizablePanel>
          )}
        </AnimatePresence>
      </ResizablePanelGroup>

      {/* Browser Modal */}
      <AnimatePresence>
        {browserOpen && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
            onClick={() => setBrowserOpen(false)}
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              className="w-full max-w-5xl h-[70vh] bg-background rounded-2xl shadow-2xl border border-purple-200/50 overflow-hidden"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="h-10 bg-background/80 border-b border-purple-200/30 flex items-center justify-between px-3">
                <div className="flex items-center gap-1.5">
                  <div className="w-2.5 h-2.5 rounded-full bg-red-500"></div>
                  <div className="w-2.5 h-2.5 rounded-full bg-yellow-500"></div>
                  <div className="w-2.5 h-2.5 rounded-full bg-green-500"></div>
                </div>
                <div className="flex-1 mx-3">
                  <div className="bg-background/60 rounded-md px-2 py-0.5 text-xs text-gray-500">
                    https://example.com
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setBrowserOpen(false)}
                  className="rounded-full h-7 w-7"
                >
                  <X className="w-3 h-3" />
                </Button>
              </div>
              <div className="h-[calc(100%-40px)] bg-white flex items-center justify-center">
                <div className="text-center text-gray-500 text-sm">
                  <Globe className="w-12 h-12 mx-auto mb-3 opacity-50" />
                  <p>Shared Browser View</p>
                  <p className="text-xs">MCP Browser Tools Integration</p>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default AIAgentCodeBuilder;
