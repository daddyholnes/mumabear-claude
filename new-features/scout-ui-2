'use client';

import React, { useState, useRef, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ChevronLeft, 
  ChevronRight, 
  FolderTree, 
  Eye, 
  Clock, 
  Download, 
  Send, 
  Paperclip, 
  Mic, 
  Image as ImageIcon,
  File,
  Play,
  Pause,
  X,
  FileText,
  Code,
  Folder,
  FolderOpen,
  CheckCircle,
  Circle,
  Activity
} from 'lucide-react';

// Types
interface FileNode {
  id: string;
  name: string;
  type: 'file' | 'folder';
  children?: FileNode[];
  content?: string;
  isOpen?: boolean;
}

interface TimelineStep {
  id: string;
  title: string;
  description: string;
  status: 'completed' | 'in-progress' | 'pending';
  timestamp: string;
}

interface ChatMessage {
  id: string;
  content: string;
  role: 'user' | 'assistant';
  timestamp: string;
  attachments?: string[];
}

interface Attachment {
  url: string;
  name: string;
  contentType: string;
  size: number;
}

// Matrix Rain Component
interface MatrixRainProps {
  fontSize?: number;
  color?: string;
  characters?: string;
  fadeOpacity?: number;
  speed?: number;
}

const MatrixRain: React.FC<MatrixRainProps> = ({
  fontSize = 20,
  color = '#00ff00',
  characters = '01',
  fadeOpacity = 0.1,
  speed = 1
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    const chars = characters.split('');
    const drops: number[] = [];
    const columnCount = Math.floor(canvas.width / fontSize);

    for (let i = 0; i < columnCount; i++) {
      drops[i] = Math.random() * -100;
    }

    const draw = () => {
      ctx.fillStyle = `rgba(0, 0, 0, ${fadeOpacity})`;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      ctx.fillStyle = color;
      ctx.font = `${fontSize}px monospace`;

      for (let i = 0; i < drops.length; i++) {
        const char = chars[Math.floor(Math.random() * chars.length)];
        ctx.fillText(char, i * fontSize, drops[i] * fontSize);

        if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
          drops[i] = 0;
        }
        drops[i] += speed;
      }
    };

    const interval = setInterval(draw, 33 / speed);

    return () => {
      clearInterval(interval);
      window.removeEventListener('resize', resizeCanvas);
    };
  }, [fontSize, color, characters, fadeOpacity, speed]);

  return (
    <canvas
      ref={canvasRef}
      style={{
        position: 'fixed',
        top: 0,
        left: 0,
        width: '100%',
        height: '100%',
        zIndex: 0,
      }}
    />
  );
};

// File Tree Component
const FileTreeNode: React.FC<{ node: FileNode; onFileSelect: (file: FileNode) => void; level: number }> = ({ 
  node, 
  onFileSelect, 
  level 
}) => {
  const [isOpen, setIsOpen] = useState(node.isOpen || false);

  const handleToggle = () => {
    if (node.type === 'folder') {
      setIsOpen(!isOpen);
    } else {
      onFileSelect(node);
    }
  };

  return (
    <div>
      <div 
        className="flex items-center gap-2 py-1 px-2 hover:bg-background/50 cursor-pointer rounded text-sm"
        style={{ paddingLeft: `${level * 16 + 8}px` }}
        onClick={handleToggle}
      >
        {node.type === 'folder' ? (
          isOpen ? <FolderOpen className="w-4 h-4 text-blue-400" /> : <Folder className="w-4 h-4 text-blue-400" />
        ) : (
          <FileText className="w-4 h-4 text-green-400" />
        )}
        <span className="text-foreground">{node.name}</span>
      </div>
      {node.type === 'folder' && isOpen && node.children && (
        <div>
          {node.children.map(child => (
            <FileTreeNode 
              key={child.id} 
              node={child} 
              onFileSelect={onFileSelect} 
              level={level + 1} 
            />
          ))}
        </div>
      )}
    </div>
  );
};

// Live Ticker Component
const LiveTicker: React.FC<{ steps: TimelineStep[] }> = ({ steps }) => {
  const [currentStep, setCurrentStep] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentStep(prev => (prev + 1) % steps.length);
    }, 3000);

    return () => clearInterval(interval);
  }, [steps.length]);

  const activeStep = steps[currentStep];

  return (
    <motion.div 
      className="fixed bottom-4 right-4 bg-background/90 backdrop-blur-sm border border-border rounded-lg p-3 max-w-xs z-50"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
    >
      <div className="flex items-center gap-2">
        <Activity className="w-4 h-4 text-green-400 animate-pulse" />
        <div className="flex-1">
          <div className="text-xs text-muted-foreground">Live Progress</div>
          <div className="text-sm font-medium text-foreground">{activeStep?.title}</div>
        </div>
      </div>
    </motion.div>
  );
};

// Main AI Agent Interface
const AIAgentInterface: React.FC = () => {
  const [leftPanelOpen, setLeftPanelOpen] = useState(false);
  const [rightPanelOpen, setRightPanelOpen] = useState(false);
  const [selectedFile, setSelectedFile] = useState<FileNode | null>(null);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState('');
  const [attachments, setAttachments] = useState<Attachment[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [theme, setTheme] = useState('purple-neon');
  const [showMatrix, setShowMatrix] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Sample data
  const fileTree: FileNode[] = [
    {
      id: '1',
      name: 'src',
      type: 'folder',
      isOpen: true,
      children: [
        { id: '2', name: 'components', type: 'folder', children: [
          { id: '3', name: 'Header.tsx', type: 'file', content: 'import React from "react";\n\nconst Header = () => {\n  return <header>My App</header>;\n};\n\nexport default Header;' },
          { id: '4', name: 'Footer.tsx', type: 'file', content: 'import React from "react";\n\nconst Footer = () => {\n  return <footer>Â© 2024</footer>;\n};\n\nexport default Footer;' }
        ]},
        { id: '5', name: 'pages', type: 'folder', children: [
          { id: '6', name: 'index.tsx', type: 'file', content: 'import React from "react";\n\nconst HomePage = () => {\n  return <div>Welcome to my app!</div>;\n};\n\nexport default HomePage;' }
        ]},
        { id: '7', name: 'utils', type: 'folder', children: [
          { id: '8', name: 'helpers.ts', type: 'file', content: 'export const formatDate = (date: Date) => {\n  return date.toLocaleDateString();\n};' }
        ]}
      ]
    },
    {
      id: '9',
      name: 'package.json',
      type: 'file',
      content: '{\n  "name": "my-app",\n  "version": "1.0.0",\n  "dependencies": {\n    "react": "^18.0.0"\n  }\n}'
    }
  ];

  const timelineSteps: TimelineStep[] = [
    { id: '1', title: 'Environment Setup', description: 'Spinning up development environment', status: 'completed', timestamp: '10:30 AM' },
    { id: '2', title: 'Project Initialization', description: 'Creating project structure', status: 'completed', timestamp: '10:32 AM' },
    { id: '3', title: 'Dependencies Installation', description: 'Installing required packages', status: 'completed', timestamp: '10:35 AM' },
    { id: '4', title: 'Component Generation', description: 'Creating React components', status: 'in-progress', timestamp: '10:38 AM' },
    { id: '5', title: 'API Integration', description: 'Setting up backend connections', status: 'pending', timestamp: 'Pending' },
    { id: '6', title: 'Testing & Deployment', description: 'Running tests and deploying', status: 'pending', timestamp: 'Pending' }
  ];

  const themes = {
    'purple-neon': {
      bg: 'from-purple-900 via-black to-indigo-900',
      accent: 'purple-500',
      text: 'purple-100'
    },
    'tokyo-night': {
      bg: 'from-gray-900 via-blue-900 to-black',
      accent: 'cyan-400',
      text: 'cyan-100'
    },
    'blue-explosion': {
      bg: 'from-blue-600 via-blue-800 to-blue-900',
      accent: 'blue-300',
      text: 'blue-50'
    },
    'pink-scrumptious': {
      bg: 'from-pink-900 via-rose-800 to-purple-900',
      accent: 'pink-400',
      text: 'pink-100'
    },
    'orange-explosion': {
      bg: 'from-orange-600 via-red-700 to-yellow-800',
      accent: 'orange-300',
      text: 'orange-50'
    }
  };

  const currentTheme = themes[theme as keyof typeof themes];

  const handleSendMessage = () => {
    if (!input.trim() && attachments.length === 0) return;

    const newMessage: ChatMessage = {
      id: Date.now().toString(),
      content: input,
      role: 'user',
      timestamp: new Date().toLocaleTimeString(),
      attachments: attachments.map(a => a.name)
    };

    setMessages(prev => [...prev, newMessage]);
    setInput('');
    setAttachments([]);
    setIsGenerating(true);

    // Simulate AI response
    setTimeout(() => {
      const aiResponse: ChatMessage = {
        id: (Date.now() + 1).toString(),
        content: "I'll help you build that full-stack application. Let me start by setting up the development environment and creating the project structure.",
        role: 'assistant',
        timestamp: new Date().toLocaleTimeString()
      };
      setMessages(prev => [...prev, aiResponse]);
      setIsGenerating(false);
    }, 2000);
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    files.forEach(file => {
      const attachment: Attachment = {
        url: URL.createObjectURL(file),
        name: file.name,
        contentType: file.type,
        size: file.size
      };
      setAttachments(prev => [...prev, attachment]);
    });
  };

  const startEnvironmentSetup = () => {
    setShowMatrix(true);
    setTimeout(() => setShowMatrix(false), 3000);
  };

  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = textareaRef.current.scrollHeight + 'px';
    }
  }, [input]);

  return (
    <div className={`min-h-screen bg-gradient-to-br ${currentTheme.bg} relative overflow-hidden`}>
      {showMatrix && (
        <MatrixRain 
          fontSize={16}
          color="#00ff00"
          characters="01"
          fadeOpacity={0.05}
          speed={2}
        />
      )}

      {/* Theme Selector */}
      <div className="absolute top-4 right-4 z-50">
        <select 
          value={theme} 
          onChange={(e) => setTheme(e.target.value)}
          className="bg-background/80 backdrop-blur-sm border border-border rounded-lg px-3 py-2 text-foreground"
        >
          <option value="purple-neon">Purple Neon</option>
          <option value="tokyo-night">Tokyo Night</option>
          <option value="blue-explosion">Blue Explosion</option>
          <option value="pink-scrumptious">Pink Scrumptious</option>
          <option value="orange-explosion">Orange Explosion</option>
        </select>
      </div>

      {/* Live Ticker */}
      <LiveTicker steps={timelineSteps} />

      <div className="flex h-screen relative">
        {/* Left Panel - File Tree */}
        <AnimatePresence>
          {leftPanelOpen && (
            <motion.div
              initial={{ x: -400, opacity: 0 }}
              animate={{ x: 0, opacity: 1 }}
              exit={{ x: -400, opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 200 }}
              className="w-80 bg-background/90 backdrop-blur-sm border-r border-border flex flex-col z-40"
            >
              <div className="p-4 border-b border-border">
                <div className="flex items-center justify-between">
                  <h3 className="font-semibold text-foreground flex items-center gap-2">
                    <FolderTree className="w-5 h-5" />
                    File Explorer
                  </h3>
                  <button
                    onClick={() => setLeftPanelOpen(false)}
                    className="p-1 hover:bg-background/50 rounded"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
                <button className="mt-2 w-full bg-primary text-primary-foreground px-3 py-2 rounded-lg text-sm hover:bg-primary/90 transition-colors">
                  <Download className="w-4 h-4 inline mr-2" />
                  Download Project
                </button>
              </div>
              <div className="flex-1 overflow-y-auto p-2">
                {fileTree.map(node => (
                  <FileTreeNode 
                    key={node.id} 
                    node={node} 
                    onFileSelect={setSelectedFile} 
                    level={0} 
                  />
                ))}
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Left Panel Toggle */}
        <button
          onClick={() => setLeftPanelOpen(!leftPanelOpen)}
          className={`fixed left-4 top-1/2 transform -translate-y-1/2 z-50 bg-background/80 backdrop-blur-sm border border-border rounded-lg p-3 hover:bg-background transition-colors ${leftPanelOpen ? 'translate-x-80' : ''}`}
        >
          <ChevronRight className={`w-5 h-5 transition-transform ${leftPanelOpen ? 'rotate-180' : ''}`} />
        </button>

        {/* Center Chat Area */}
        <div className="flex-1 flex flex-col max-w-4xl mx-auto p-4 relative z-10">
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold text-foreground mb-2">
              AI Full-Stack Agent
            </h1>
            <p className="text-muted-foreground">
              From prompt to plan to production - autonomous development
            </p>
            <button
              onClick={startEnvironmentSetup}
              className="mt-4 bg-primary text-primary-foreground px-6 py-3 rounded-lg hover:bg-primary/90 transition-colors"
            >
              Start Environment Setup
            </button>
          </div>

          {/* Chat Messages */}
          <div className="flex-1 overflow-y-auto mb-4 space-y-4">
            {messages.map(message => (
              <motion.div
                key={message.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                  message.role === 'user' 
                    ? 'bg-primary text-primary-foreground' 
                    : 'bg-background/80 backdrop-blur-sm border border-border text-foreground'
                }`}>
                  <p>{message.content}</p>
                  <div className="text-xs opacity-70 mt-1">{message.timestamp}</div>
                  {message.attachments && message.attachments.length > 0 && (
                    <div className="mt-2 text-xs">
                      ð {message.attachments.join(', ')}
                    </div>
                  )}
                </div>
              </motion.div>
            ))}
            {isGenerating && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="flex justify-start"
              >
                <div className="bg-background/80 backdrop-blur-sm border border-border text-foreground px-4 py-2 rounded-lg">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-primary rounded-full animate-pulse"></div>
                    <div className="w-2 h-2 bg-primary rounded-full animate-pulse" style={{ animationDelay: '0.2s' }}></div>
                    <div className="w-2 h-2 bg-primary rounded-full animate-pulse" style={{ animationDelay: '0.4s' }}></div>
                  </div>
                </div>
              </motion.div>
            )}
          </div>

          {/* Chat Input */}
          <div className="bg-background/80 backdrop-blur-sm border border-border rounded-lg p-4">
            {attachments.length > 0 && (
              <div className="flex gap-2 mb-3 overflow-x-auto">
                {attachments.map((attachment, index) => (
                  <div key={index} className="relative bg-background/50 rounded-lg p-2 min-w-0">
                    <div className="text-xs text-foreground truncate max-w-20">{attachment.name}</div>
                    <button
                      onClick={() => setAttachments(prev => prev.filter((_, i) => i !== index))}
                      className="absolute -top-1 -right-1 bg-destructive text-destructive-foreground rounded-full w-4 h-4 flex items-center justify-center text-xs"
                    >
                      Ã
                    </button>
                  </div>
                ))}
              </div>
            )}
            
            <div className="flex gap-2">
              <div className="flex gap-1">
                <button
                  onClick={() => fileInputRef.current?.click()}
                  className="p-2 hover:bg-background/50 rounded-lg transition-colors"
                >
                  <Paperclip className="w-5 h-5" />
                </button>
                <button className="p-2 hover:bg-background/50 rounded-lg transition-colors">
                  <ImageIcon className="w-5 h-5" />
                </button>
                <button className="p-2 hover:bg-background/50 rounded-lg transition-colors">
                  <Mic className="w-5 h-5" />
                </button>
              </div>
              
              <textarea
                ref={textareaRef}
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Describe your full-stack application..."
                className="flex-1 bg-transparent border-none outline-none resize-none text-foreground placeholder-muted-foreground min-h-[40px] max-h-32"
                onKeyDown={(e) => {
                  if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    handleSendMessage();
                  }
                }}
              />
              
              <button
                onClick={handleSendMessage}
                disabled={!input.trim() && attachments.length === 0}
                className="p-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Send className="w-5 h-5" />
              </button>
            </div>
          </div>

          <input
            ref={fileInputRef}
            type="file"
            multiple
            className="hidden"
            onChange={handleFileUpload}
          />
        </div>

        {/* Right Panel Toggle */}
        <button
          onClick={() => setRightPanelOpen(!rightPanelOpen)}
          className={`fixed right-4 top-1/2 transform -translate-y-1/2 z-50 bg-background/80 backdrop-blur-sm border border-border rounded-lg p-3 hover:bg-background transition-colors ${rightPanelOpen ? '-translate-x-80' : ''}`}
        >
          <ChevronLeft className={`w-5 h-5 transition-transform ${rightPanelOpen ? 'rotate-180' : ''}`} />
        </button>

        {/* Right Panel - Preview & Timeline */}
        <AnimatePresence>
          {rightPanelOpen && (
            <motion.div
              initial={{ x: 400, opacity: 0 }}
              animate={{ x: 0, opacity: 1 }}
              exit={{ x: 400, opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 200 }}
              className="w-80 bg-background/90 backdrop-blur-sm border-l border-border flex flex-col z-40"
            >
              <div className="flex border-b border-border">
                <button className="flex-1 p-3 text-sm font-medium border-r border-border bg-primary/10 text-primary">
                  <Eye className="w-4 h-4 inline mr-2" />
                  Preview
                </button>
                <button className="flex-1 p-3 text-sm font-medium text-muted-foreground hover:text-foreground">
                  <Clock className="w-4 h-4 inline mr-2" />
                  Timeline
                </button>
              </div>

              {/* Preview Content */}
              <div className="flex-1 overflow-y-auto p-4">
                {selectedFile ? (
                  <div>
                    <div className="flex items-center justify-between mb-4">
                      <h4 className="font-medium text-foreground">{selectedFile.name}</h4>
                      <button className="text-xs bg-primary text-primary-foreground px-2 py-1 rounded">
                        <Download className="w-3 h-3 inline mr-1" />
                        Download
                      </button>
                    </div>
                    <pre className="bg-background/50 p-3 rounded-lg text-xs text-foreground overflow-x-auto">
                      <code>{selectedFile.content || 'No content available'}</code>
                    </pre>
                  </div>
                ) : (
                  <div className="text-center text-muted-foreground py-8">
                    <Code className="w-12 h-12 mx-auto mb-4 opacity-50" />
                    <p>Select a file to preview</p>
                  </div>
                )}

                {/* Timeline */}
                <div className="mt-8">
                  <h4 className="font-medium text-foreground mb-4 flex items-center gap-2">
                    <Clock className="w-4 h-4" />
                    Development Timeline
                  </h4>
                  <div className="space-y-3">
                    {timelineSteps.map(step => (
                      <div key={step.id} className="flex items-start gap-3">
                        <div className="mt-1">
                          {step.status === 'completed' ? (
                            <CheckCircle className="w-4 h-4 text-green-400" />
                          ) : step.status === 'in-progress' ? (
                            <Circle className="w-4 h-4 text-yellow-400 animate-pulse" />
                          ) : (
                            <Circle className="w-4 h-4 text-muted-foreground" />
                          )}
                        </div>
                        <div className="flex-1">
                          <div className="text-sm font-medium text-foreground">{step.title}</div>
                          <div className="text-xs text-muted-foreground">{step.description}</div>
                          <div className="text-xs text-muted-foreground mt-1">{step.timestamp}</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default AIAgentInterface;
